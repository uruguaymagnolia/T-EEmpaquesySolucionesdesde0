{
  "name": "src",
  "type": "directory",
  "children": [
    {
      "name": "ai",
      "type": "directory",
      "children": [
        {
          "name": "dev.ts",
          "type": "file",
          "content": "import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/suggest-content-ideas.ts';"
        },
        {
          "name": "flows",
          "type": "directory",
          "children": [
            {
              "name": "suggest-content-ideas.ts",
              "type": "file",
              "content": "'use server';\n\n/**\n * @fileOverview An AI agent for suggesting content ideas and design variations.\n *\n * - suggestContentIdeas - A function that generates content suggestions.\n * - SuggestContentIdeasInput - The input type for the suggestContentIdeas function.\n * - SuggestContentIdeasOutput - The return type for the suggestContentIdeas function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestContentIdeasInputSchema = z.object({\n  applicationStructure: z\n    .string()\n    .describe('The structure of the application, including sections and pages.'),\n  userNeeds: z.string().describe('The specific needs and goals of the user.'),\n});\nexport type SuggestContentIdeasInput = z.infer<typeof SuggestContentIdeasInputSchema>;\n\nconst SuggestContentIdeasOutputSchema = z.object({\n  contentSuggestions: z\n    .array(z.string())\n    .describe('A list of content ideas or design variations.'),\n});\nexport type SuggestContentIdeasOutput = z.infer<typeof SuggestContentIdeasOutputSchema>;\n\nexport async function suggestContentIdeas(input: SuggestContentIdeasInput): Promise<SuggestContentIdeasOutput> {\n  return suggestContentIdeasFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestContentIdeasPrompt',\n  input: {schema: SuggestContentIdeasInputSchema},\n  output: {schema: SuggestContentIdeasOutputSchema},\n  prompt: `You are an AI assistant specialized in suggesting content ideas and design variations for web applications.\n\n  Based on the provided application structure and user needs, generate a list of creative and relevant content suggestions.\n\n  Application Structure: {{{applicationStructure}}}\n  User Needs: {{{userNeeds}}}\n\n  Please provide a list of content ideas that align with the application structure and fulfill the user's needs. Give me multiple options. Focus on content that would be displayed on the main content area of the app.\n  The response must be in Spanish.\n  `,\n});\n\nconst suggestContentIdeasFlow = ai.defineFlow(\n  {\n    name: 'suggestContentIdeasFlow',\n    inputSchema: SuggestContentIdeasInputSchema,\n    outputSchema: SuggestContentIdeasOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"
            }
          ]
        },
        {
          "name": "genkit.ts",
          "type": "file",
          "content": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"
        }
      ]
    },
    {
      "name": "app",
      "type": "directory",
      "children": [
        {
          "name": "actions",
          "type": "directory",
          "children": [
            {
              "name": "contact.ts",
              "type": "file",
              "content": "'use server';\n\nimport prisma from '@/lib/prisma';\nimport { z } from 'zod';\n\nconst formSchema = z.object({\n  name: z.string().min(2, 'El nombre debe tener al menos 2 caracteres.'),\n  email: z.string().email('Por favor, introduce un email v\u00e1lido.'),\n  message: z\n    .string()\n    .min(10, 'El mensaje debe tener al menos 10 caracteres.'),\n});\n\nexport type FormState = {\n  message: string;\n  status: 'idle' | 'success' | 'error';\n};\n\nexport async function createMessage(\n  prevState: FormState,\n  formData: FormData\n): Promise<FormState> {\n  const validatedFields = formSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    message: formData.get('message'),\n  });\n\n  if (!validatedFields.success) {\n    const errorMessages = validatedFields.error.flatten().fieldErrors;\n    const firstError =\n      Object.values(errorMessages)[0]?.[0] || 'Error de validaci\u00f3n.';\n    return {\n      message: firstError,\n      status: 'error',\n    };\n  }\n\n  const { name, email, message } = validatedFields.data;\n\n  try {\n    await prisma.message.create({\n      data: {\n        name,\n        email,\n        message,\n      },\n    });\n\n    return {\n      message: 'Gracias por tu mensaje. Te responderemos pronto.',\n      status: 'success',\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      message:\n        'Ha ocurrido un error al enviar el mensaje. Por favor, int\u00e9ntalo de nuevo.',\n      status: 'error',\n    };\n  }\n}\n"
            }
          ]
        },
        {
          "name": "actions.ts",
          "type": "file",
          "content": "'use server';\n\nimport { suggestContentIdeas, type SuggestContentIdeasOutput } from '@/ai/flows/suggest-content-ideas';\nimport { z } from 'zod';\n\nconst applicationStructure = `\n- Barra Lateral de Navegaci\u00f3n: Inicio, Productos, Servicios, Contacto.\n- \u00c1rea de Contenido Principal: Muestra el contenido de la secci\u00f3n activa.\n- Pie de p\u00e1gina: Informaci\u00f3n de copyright.\n`;\n\nconst schema = z.object({\n  userNeeds: z.string().min(10, { message: 'Por favor, describe tus necesidades con m\u00e1s detalle (m\u00ednimo 10 caracteres).' }),\n});\n\nexport type FormState = {\n  message: string | null;\n  data: SuggestContentIdeasOutput | null;\n  error: boolean;\n}\n\nexport async function getSuggestions(prevState: FormState, formData: FormData): Promise<FormState> {\n  const validatedFields = schema.safeParse({\n    userNeeds: formData.get('userNeeds'),\n  });\n  \n  if (!validatedFields.success) {\n    return {\n      message: validatedFields.error.flatten().fieldErrors.userNeeds?.[0] || 'Error de validaci\u00f3n.',\n      data: null,\n      error: true,\n    }\n  }\n\n  try {\n    const result = await suggestContentIdeas({\n      applicationStructure,\n      userNeeds: validatedFields.data.userNeeds,\n    });\n    return {\n      message: 'Sugerencias generadas exitosamente.',\n      data: result,\n      error: false\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      message: 'Ha ocurrido un error al generar las sugerencias. Por favor, intenta de nuevo.',\n      data: null,\n      error: true,\n    };\n  }\n}\n"
        },
        {
          "name": "contacto",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "import { ContactForm } from '@/components/landing/ContactForm';\nimport { companyData } from '@/lib/data';\nimport { Mail, Phone, MapPin } from 'lucide-react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\n\nexport default function ContactoPage() {\n  return (\n    <div className=\"bg-background-dark\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold\">Cont\u00e1ctenos</h1>\n          <p className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\">\n            Estamos aqu\u00ed para ayudarle. Env\u00edenos un mensaje o vis\u00edtenos.\n          </p>\n        </div>\n      </header>\n\n      <section className=\"py-16 md:py-24\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-start\">\n            {/* Informaci\u00f3n de Contacto */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-3xl font-bold text-white mb-4\">\n                  Informaci\u00f3n de Contacto\n                </h2>\n                <p className=\"text-muted-foreground mb-6\">\n                  Complete el formulario y nuestro equipo se pondr\u00e1 en contacto\n                  con usted en las pr\u00f3ximas 24 horas.\n                </p>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"w-5 h-5 text-primary\" />\n                    <a\n                      href={`mailto:${companyData.email}`}\n                      className=\"text-foreground hover:text-primary transition\"\n                    >\n                      {companyData.email}\n                    </a>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Phone className=\"w-5 h-5 text-primary\" />\n                    <a\n                      href={companyData.phone.href}\n                      className=\"text-foreground hover:text-primary transition\"\n                    >\n                      {companyData.phone.number}\n                    </a>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <MapPin className=\"w-5 h-5 text-primary\" />\n                    <p className=\"text-foreground\">{companyData.address}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Formulario de Contacto */}\n            <Card className=\"bg-slate-800/50 border-slate-700/50\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">\n                  Env\u00edenos un mensaje\n                </CardTitle>\n                <CardDescription>\n                  Nos encantar\u00eda saber de usted.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ContactForm />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "favicon.ico",
          "type": "file"
        },
        {
          "name": "globals.css",
          "type": "file"
        },
        {
          "name": "layout.tsx",
          "type": "file",
          "content": "import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport { Toaster } from '@/components/ui/toaster';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/footer';\nimport { ScrollProgress } from '@/components/animations/scroll-animations';\nimport { CustomParticles } from '@/components/background/custom-particles';\nimport { BackToTopButton } from '@/components/common/BackToTopButton';\nimport PwaInstaller from '@/components/PwaInstaller';\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n});\n\nexport const metadata: Metadata = {\n  title: 'T & E Empaques y Soluciones',\n  description: 'Soluciones de empaque innovadoras y personalizadas.',\n  manifest: '/manifest.json',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"es\" className={`${inter.variable}`}>\n       <head>\n        <meta name=\"theme-color\" content=\"#1a2435\" />\n      </head>\n      <body className=\"font-sans antialiased relative overflow-x-hidden bg-background-dark\">\n        <PwaInstaller />\n        <ScrollProgress />\n        <CustomParticles />\n        <div className=\"flex flex-col min-h-screen relative z-10\">\n          <Header />\n          <main className=\"flex-grow\">{children}</main>\n          <Footer />\n        </div>\n        <Toaster />\n        <BackToTopButton />\n      </body>\n    </html>\n  );\n}\n"
        },
        {
          "name": "page.tsx",
          "type": "file",
          "content": "'use server';\n\nimport type { Product, CaseStudy, Solution } from '@prisma/client';\nimport prisma from '@/lib/prisma';\nimport ClientSectionsWrapper from '@/components/common/ClientSectionsWrapper';\n\nexport default async function HomePage() {\n  const products: Product[] = await prisma.product.findMany({\n    take: 10,\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n\n  const caseStudies: CaseStudy[] = await prisma.caseStudy.findMany({\n    take: 3,\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n\n  const solutions: Solution[] = await prisma.solution.findMany({\n    take: 8,\n    orderBy: {\n      createdAt: 'asc',\n    },\n  });\n\n  return (\n    <ClientSectionsWrapper\n      products={products}\n      caseStudies={caseStudies}\n      solutions={solutions}\n    />\n  );\n}\n"
        },
        {
          "name": "politica-de-privacidad",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { ScrollReveal } from '@/components/animations/scroll-animations';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\n\nexport default function PoliticaDePrivacidadPage() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return (\n    <div className=\"bg-slate-900 text-gray-300\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <motion.h1\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"text-4xl md:text-5xl font-bold\"\n          >\n            Pol\u00edtica de Privacidad\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\"\n          >\n            \u00daltima actualizaci\u00f3n: {isClient ? new Date().toLocaleDateString('es-ES') : '24 de Julio, 2024'}\n          </motion.p>\n        </div>\n      </header>\n\n      <main className=\"py-16 md:py-24\">\n        <ScrollReveal className=\"container mx-auto px-4 max-w-4xl space-y-8\">\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              1. Introducci\u00f3n\n            </h2>\n            <p>\n              Bienvenido a T & E Empaques y Soluciones. Nos comprometemos a\n              proteger su privacidad. Esta Pol\u00edtica de Privacidad explica c\u00f3mo\n              recopilamos, usamos, divulgamos y salvaguardamos su informaci\u00f3n\n              cuando visita nuestro sitio web. Lea esta pol\u00edtica de privacidad\n              detenidamente. Si no est\u00e1 de acuerdo con los t\u00e9rminos de esta\n              pol\u00edtica de privacidad, no acceda al sitio.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              2. Informaci\u00f3n que Recopilamos\n            </h2>\n            <p>\n              Podemos recopilar informaci\u00f3n sobre usted de varias maneras. La\n              informaci\u00f3n que podemos recopilar en el Sitio incluye:\n            </p>\n            <ul className=\"list-disc list-inside mt-2 space-y-2\">\n              <li>\n                <strong>Datos Personales:</strong> Informaci\u00f3n de identificaci\u00f3n\n                personal, como su nombre, direcci\u00f3n de correo electr\u00f3nico y\n                n\u00famero de tel\u00e9fono, que nos proporciona voluntariamente cuando se\n                registra en el Sitio o cuando elige participar en diversas\n                actividades relacionadas con el Sitio, como contactarnos a\n                trav\u00e9s de nuestro formulario.\n              </li>\n              <li>\n                <strong>Datos Derivados:</strong> Informaci\u00f3n que nuestros\n                servidores recopilan autom\u00e1ticamente cuando accede al Sitio, como\n                su direcci\u00f3n IP, su tipo de navegador, su sistema operativo, sus\n                tiempos de acceso y las p\u00e1ginas que ha visto directamente antes y\n                despu\u00e9s de acceder al Sitio.\n              </li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              3. Uso de la Informaci\u00f3n\n            </h2>\n            <p>\n              Tener informaci\u00f3n precisa sobre usted nos permite brindarle una\n              experiencia fluida, eficiente y personalizada. Espec\u00edficamente,\n              podemos usar la informaci\u00f3n recopilada sobre usted a trav\u00e9s del\n              Sitio para:\n            </p>\n            <ul className=\"list-disc list-inside mt-2 space-y-2\">\n              <li>\n                Responder a sus solicitudes de productos y servicios y a sus\n                consultas.\n              </li>\n              <li>Enviarle un correo electr\u00f3nico de confirmaci\u00f3n.</li>\n              <li>\n                Administrar sorteos, promociones, encuestas u otras\n                caracter\u00edsticas del sitio.\n              </li>\n              <li>\n                Mejorar nuestro sitio web y nuestros esfuerzos de marketing.\n              </li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              4. Compartir su Informaci\u00f3n\n            </h2>\n            <p>\n              No compartiremos su informaci\u00f3n con terceros para sus fines de\n              marketing. Podemos compartir la informaci\u00f3n que hemos recopilado\n              sobre usted en ciertas situaciones. Su informaci\u00f3n puede ser\n              divulgada de la siguiente manera:\n            </p>\n            <ul className=\"list-disc list-inside mt-2 space-y-2\">\n              <li>\n                <strong>Por Ley o para Proteger Derechos:</strong> Si creemos que\n                la divulgaci\u00f3n de informaci\u00f3n sobre usted es necesaria para\n                responder a un proceso legal, para investigar o remediar\n                posibles violaciones de nuestras pol\u00edticas, o para proteger los\n                derechos, la propiedad y la seguridad de otros, podemos compartir\n                su informaci\u00f3n seg\u00fan lo permita o exija cualquier ley, regla o\n                regulaci\u00f3n aplicable.\n              </li>\n              <li>\n                <strong>Proveedores de Servicios de Terceros:</strong> Podemos\n                compartir su informaci\u00f3n con terceros que realizan servicios\n                para nosotros o en nuestro nombre, incluido el procesamiento de\n                pagos, el an\u00e1lisis de datos, el env\u00edo de correos electr\u00f3nicos,\n                los servicios de alojamiento, el servicio al cliente y la\n                asistencia de marketing.\n              </li>\n            </ul>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              5. Sus Derechos\n            </h2>\n            <p>\n              Usted tiene derecho a acceder, corregir o eliminar su informaci\u00f3n\n              personal. Tambi\u00e9n puede tener derecho a oponerse o restringir\n              ciertos tipos de procesamiento de su informaci\u00f3n. Para ejercer\n              estos derechos, cont\u00e1ctenos utilizando la informaci\u00f3n de contacto a\n              continuaci\u00f3n.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              6. Cambios a esta Pol\u00edtica\n            </h2>\n            <p>\n              Nos reservamos el derecho de realizar cambios a esta Pol\u00edtica de\n              Privacidad en cualquier momento y por cualquier motivo. Le\n              alertaremos sobre cualquier cambio actualizando la fecha de &quot;\u00daltima\n              actualizaci\u00f3n&quot; de esta Pol\u00edtica de Privacidad. Se le anima a\n              revisar peri\u00f3dicamente esta Pol\u00edtica de Privacidad para mantenerse\n              informado de las actualizaciones.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              7. Contacto\n            </h2>\n            <p>\n              Si tiene preguntas o comentarios sobre esta Pol\u00edtica de Privacidad,\n              cont\u00e1ctenos en:\n              <br />\n              <a\n                href=\"mailto:contacto@tempaques.com\"\n                className=\"text-primary hover:underline\"\n              >\n                contacto@tempaques.com\n              </a>\n            </p>\n          </section>\n        </ScrollReveal>\n      </main>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "preguntas-frecuentes",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport FAQSection from '@/components/sections/faq-section';\nimport { motion } from 'framer-motion';\n\nexport default function PreguntasFrecuentesPage() {\n  return (\n    <div className=\"bg-slate-900 text-gray-300\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <motion.h1\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"text-4xl md:text-5xl font-bold\"\n          >\n            Preguntas Frecuentes\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\"\n          >\n            Encuentre respuestas a las dudas m\u00e1s comunes sobre nuestros\n            servicios y productos.\n          </motion.p>\n        </div>\n      </header>\n\n      <main className=\"py-16 md:py-24\">\n        <FAQSection />\n      </main>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "products",
          "type": "directory",
          "children": [
            {
              "name": "[slug]",
              "type": "directory",
              "children": [
                {
                  "name": "client-page.tsx",
                  "type": "file",
                  "content": "'use client';\n\nimport type { Product } from '@prisma/client';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\nimport { ArrowLeft } from 'lucide-react';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ProductCard } from '@/components/landing/ProductCard';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\n\ntype ProductDetailsClientPageProps = {\n  product: Product;\n  relatedProducts: Product[];\n};\n\nexport function ProductDetailsClientPage({\n  product,\n  relatedProducts,\n}: ProductDetailsClientPageProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"bg-slate-900 text-white\"\n    >\n      <div className=\"container mx-auto max-w-6xl px-4 py-16 md:py-24\">\n        <div className=\"mb-8\">\n          <Link href=\"/products\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Volver a todos los productos\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2 md:gap-12\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"relative\"\n          >\n            <Card className=\"overflow-hidden border-slate-700/50 bg-slate-800/50\">\n              <Image\n                src={product.imageUrl}\n                alt={product.imageAlt}\n                width={800}\n                height={600}\n                sizes=\"(max-width: 768px) 100vw, 50vw\"\n                className=\"h-auto w-full object-cover\"\n                data-ai-hint={product.dataAiHint ?? 'product image'}\n              />\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n            className=\"flex flex-col\"\n          >\n            <Badge\n              variant=\"default\"\n              className=\"mb-4 w-fit bg-primary/80 backdrop-blur-sm\"\n            >\n              {product.category}\n            </Badge>\n            <h1 className=\"mb-4 text-4xl font-bold md:text-5xl\">\n              {product.name}\n            </h1>\n            <p className=\"mb-6 text-lg text-gray-300\">{product.description}</p>\n\n            <div className=\"mt-auto\">\n              <Link href=\"/contacto\">\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                >\n                  Solicitar Cotizaci\u00f3n\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n\n        {relatedProducts.length > 0 && (\n          <div className=\"mt-24\">\n            <h2 className=\"mb-8 text-center text-3xl font-bold\">\n              Productos Relacionados\n            </h2>\n            <Carousel\n              opts={{\n                align: 'start',\n                loop: true,\n              }}\n              className=\"w-full\"\n            >\n              <CarouselContent>\n                {relatedProducts.map((relatedProduct) => (\n                  <CarouselItem\n                    key={relatedProduct.id}\n                    className=\"md:basis-1/2 lg:basis-1/3 xl:basis-1/4\"\n                  >\n                    <div className=\"p-2\">\n                      <ProductCard product={relatedProduct} />\n                    </div>\n                  </CarouselItem>\n                ))}\n              </CarouselContent>\n              <CarouselPrevious className=\"absolute -left-4 top-1/2 -translate-y-1/2 hidden sm:flex\" />\n              <CarouselNext className=\"absolute -right-4 top-1/2 -translate-y-1/2 hidden sm:flex\" />\n            </Carousel>\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n"
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "'use server';\n\nimport { notFound } from 'next/navigation';\nimport { ProductDetailsClientPage } from './client-page';\nimport { getProductBySlug, getRelatedProducts } from '../actions';\n\ntype ProductDetailsPageProps = {\n  params: {\n    slug: string;\n  };\n};\n\nexport default async function ProductDetailsPage({\n  params,\n}: ProductDetailsPageProps) {\n  const product = await getProductBySlug(params.slug);\n\n  if (!product) {\n    notFound();\n  }\n\n  const relatedProducts = await getRelatedProducts(\n    product.category,\n    product.id\n  );\n\n  return (\n    <ProductDetailsClientPage\n      product={product}\n      relatedProducts={relatedProducts}\n    />\n  );\n}\n"
                }
              ]
            },
            {
              "name": "actions.ts",
              "type": "file",
              "content": "'use server';\n\nimport prisma from '@/lib/prisma';\nimport type { Product } from '@prisma/client';\n\nexport async function getProductBySlug(slug: string): Promise<Product | null> {\n  const product = await prisma.product.findUnique({\n    where: {\n      slug: slug,\n    },\n  });\n\n  if (!product) {\n    return null;\n  }\n  return product;\n}\n\nexport async function getRelatedProducts(\n  category: string,\n  currentId: string\n): Promise<Product[]> {\n  const products = await prisma.product.findMany({\n    where: {\n      category: category,\n      id: {\n        not: currentId,\n      },\n    },\n    take: 5,\n  });\n  return products;\n}\n"
            },
            {
              "name": "page.tsx",
              "type": "file",
              "content": "import { ProductsContent } from '@/components/landing/ProductsContent';\nimport prisma from '@/lib/prisma';\nimport type { Product } from '@prisma/client';\n\nexport default async function ProductsPage() {\n  const products: Product[] = await prisma.product.findMany({\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n\n  return (\n    <div className=\"bg-slate-900\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-bold\">\n            Nuestro Cat\u00e1logo de Productos\n          </h1>\n          <p className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\">\n            Explore nuestra amplia gama de soluciones de empaque dise\u00f1adas para\n            proteger y realzar su producto.\n          </p>\n        </div>\n      </header>\n      <ProductsContent products={products} />\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "proyectos",
          "type": "directory",
          "children": [
            {
              "name": "[slug]",
              "type": "directory",
              "children": [
                {
                  "name": "client-page.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport type { CaseStudy } from '@prisma/client';\nimport Image from 'next/image';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, ArrowLeft } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\n\ntype ProjectDetailsClientPageProps = {\n  caseStudy: CaseStudy;\n};\n\nexport function ProjectDetailsClientPage({\n  caseStudy,\n}: ProjectDetailsClientPageProps) {\n  const results = (caseStudy.results || '')\n    .split(',')\n    .map((r) => r.trim())\n    .filter(Boolean);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.7 }}\n      className=\"bg-slate-900 text-white\"\n    >\n      <header className=\"relative h-[50vh] min-h-[350px] w-full\">\n        <div className=\"absolute inset-0\">\n          <Image\n            src={caseStudy.imageUrl}\n            alt={caseStudy.imageAlt}\n            fill\n            className=\"object-cover opacity-30\"\n            sizes=\"100vw\"\n            priority\n            data-ai-hint={caseStudy.dataAiHint ?? 'project image'}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-slate-900 via-slate-900/80 to-transparent\" />\n        </div>\n        <div className=\"relative z-10 container mx-auto flex h-full flex-col justify-end p-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"max-w-4xl pb-12\"\n          >\n            <Badge\n              variant=\"default\"\n              className=\"mb-4 bg-primary/80 backdrop-blur-sm\"\n            >\n              {caseStudy.category}\n            </Badge>\n            <h1 className=\"text-4xl font-bold md:text-5xl lg:text-6xl\">\n              {caseStudy.title}\n            </h1>\n            <p className=\"mt-4 text-lg text-gray-300\">\n              {caseStudy.shortDescription}\n            </p>\n          </motion.div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto max-w-6xl p-4 py-16\">\n        <div className=\"mb-8\">\n          <Link href=\"/proyectos\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Volver a Proyectos\n            </Button>\n          </Link>\n        </div>\n        <div className=\"grid grid-cols-1 gap-12 lg:grid-cols-3\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n            className=\"space-y-8 lg:col-span-2\"\n          >\n            <Card className=\"border-slate-700/50 bg-slate-800/50\">\n              <CardHeader>\n                <CardTitle className=\"text-3xl text-primary\">\n                  El Desaf\u00edo\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 prose prose-invert max-w-none\">\n                <p>{caseStudy.problem}</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-slate-700/50 bg-slate-800/50\">\n              <CardHeader>\n                <CardTitle className=\"text-3xl text-primary\">\n                  Nuestra Soluci\u00f3n\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-gray-300 prose prose-invert max-w-none\">\n                <p>{caseStudy.solution}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.6 }}\n            className=\"lg:col-span-1\"\n          >\n            <div className=\"sticky top-24\">\n              <Card className=\"border-slate-700/50 bg-slate-800/50\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-primary\">\n                    Resultados Clave\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-4\">\n                    {results.map((result, i) => (\n                      <li key={i} className=\"flex items-start gap-3\">\n                        <CheckCircle className=\"mt-1 h-5 w-5 flex-shrink-0 text-green-400\" />\n                        <span className=\"text-gray-300\">{result}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </motion.div>\n        </div>\n      </main>\n    </motion.div>\n  );\n}\n"
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "'use server';\n\nimport { notFound } from 'next/navigation';\nimport { getCaseStudyBySlug } from '../actions';\nimport { ProjectDetailsClientPage } from './client-page';\n\ntype ProjectDetailsPageProps = {\n  params: {\n    slug: string;\n  };\n};\n\nexport default async function ProjectDetailsPage({\n  params,\n}: ProjectDetailsPageProps) {\n  const caseStudy = await getCaseStudyBySlug(params.slug);\n\n  if (!caseStudy) {\n    notFound();\n  }\n\n  return <ProjectDetailsClientPage caseStudy={caseStudy} />;\n}\n"
                }
              ]
            },
            {
              "name": "actions.ts",
              "type": "file",
              "content": "'use server';\n\nimport prisma from '@/lib/prisma';\nimport type { CaseStudy } from '@prisma/client';\n\nexport async function getCaseStudies(): Promise<CaseStudy[]> {\n  try {\n    const caseStudies = await prisma.caseStudy.findMany({\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n    return caseStudies;\n  } catch (error) {\n    console.error('Error fetching case studies:', error);\n    return [];\n  }\n}\n\nexport async function getCaseStudyBySlug(\n  slug: string\n): Promise<CaseStudy | null> {\n  try {\n    const caseStudy = await prisma.caseStudy.findUnique({\n      where: {\n        slug: slug,\n      },\n    });\n    return caseStudy;\n  } catch (error) {\n    console.error(`Error fetching case study with slug ${slug}:`, error);\n    return null;\n  }\n}\n"
            },
            {
              "name": "page.tsx",
              "type": "file",
              "content": "\n'use server';\nimport type { CaseStudy } from '@prisma/client';\nimport { CaseStudyCard } from '@/components/landing/CaseStudyCard';\nimport {\n  ScrollReveal,\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '@/components/animations/scroll-animations';\nimport { motion } from 'framer-motion';\nimport { getCaseStudies } from './actions';\n\nexport default async function ProjectsPage() {\n  const caseStudies: CaseStudy[] = await getCaseStudies();\n\n  return (\n    <div className=\"bg-slate-950\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"container mx-auto px-4 text-center\"\n        >\n          <h1 className=\"text-4xl md:text-5xl font-bold\">Nuestros Proyectos</h1>\n          <p className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\">\n            Descubra c\u00f3mo hemos ayudado a nuestros clientes a alcanzar sus\n            metas con soluciones de empaque innovadoras y efectivas.\n          </p>\n        </motion.div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-16 md:py-24\">\n        <ScrollReveal>\n          {caseStudies.length > 0 ? (\n            <ScrollStaggerContainer className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {caseStudies.map((study) => (\n                <ScrollStaggerItem key={study.id}>\n                  <CaseStudyCard caseStudy={study} />\n                </ScrollStaggerItem>\n              ))}\n            </ScrollStaggerContainer>\n          ) : (\n            <div className=\"text-center text-gray-400\">\n              No hay proyectos para mostrar en este momento.\n            </div>\n          )}\n        </ScrollReveal>\n      </main>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "soluciones",
          "type": "directory",
          "children": [
            {
              "name": "[slug]",
              "type": "directory",
              "children": [
                {
                  "name": "client-page.tsx",
                  "type": "file",
                  "content": "\n'use client';\n\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, ArrowLeft, type LucideIcon } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { ScrollReveal } from '@/components/animations/scroll-animations';\nimport type { Solution } from '@prisma/client';\nimport * as lucideIcons from 'lucide-react';\n\nconst icons: { [key: string]: LucideIcon } = {\n  Gift: lucideIcons.Gift,\n  Sparkles: lucideIcons.Sparkles,\n  PackageCheck: lucideIcons.PackageCheck,\n  Shrink: lucideIcons.Shrink,\n  Flame: lucideIcons.Flame,\n  PackagePlus: lucideIcons.PackagePlus,\n  Square: lucideIcons.Square,\n  Component: lucideIcons.Component,\n};\n\nfunction getIcon(name: string): LucideIcon {\n    return icons[name] || icons.Component;\n}\n\ntype SolutionClientPageProps = {\n  solution: Solution;\n  relatedSolutions: Solution[];\n};\n\nexport function SolutionClientPage({\n  solution,\n  relatedSolutions,\n}: SolutionClientPageProps) {\n    \n  const Icon = getIcon(solution.icon);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      className=\"bg-slate-900 text-gray-300\"\n    >\n      <header className=\"bg-gradient-to-r from-slate-900 via-slate-800 to-slate-900 py-20 md:py-28\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{\n              type: 'spring',\n              stiffness: 260,\n              damping: 20,\n              delay: 0.2,\n            }}\n            className=\"mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-green-500/10\"\n          >\n            <Icon className=\"h-10 w-10 text-green-400\" />\n          </motion.div>\n          <h1 className=\"text-4xl font-bold text-white md:text-5xl lg:text-6xl\">\n            {solution.title}\n          </h1>\n          <p className=\"mx-auto mt-4 max-w-3xl text-lg text-gray-400\">\n            {solution.description}\n          </p>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto max-w-6xl px-4 py-16 md:py-24\">\n        <div className=\"mb-8\">\n          <Link href=\"/soluciones\">\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Volver a Soluciones\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-12 lg:grid-cols-3\">\n          <div className=\"space-y-8 lg:col-span-2\">\n            <ScrollReveal>\n              <h2 className=\"text-3xl font-bold text-white\">\n                Descripci\u00f3n Detallada\n              </h2>\n              <p className=\"mt-4 text-lg leading-relaxed\">\n                {solution.detailedDescription}\n              </p>\n            </ScrollReveal>\n          </div>\n\n          <div className=\"lg:col-span-1\">\n            <ScrollReveal className=\"sticky top-24\">\n              <Card className=\"border-slate-700/50 bg-slate-800/50\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-white\">\n                    Beneficios Clave\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <ul className=\"space-y-3\">\n                    {solution.keyFeatures.map((feature) => (\n                      <li key={feature} className=\"flex items-start gap-3\">\n                        <CheckCircle className=\"mt-1 h-5 w-5 flex-shrink-0 text-green-400\" />\n                        <span>{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Link href=\"/contacto\" className=\"block pt-4\">\n                    <motion.div\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <Button\n                        size=\"lg\"\n                        className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                      >\n                        Solicitar Cotizaci\u00f3n\n                      </Button>\n                    </motion.div>\n                  </Link>\n                </CardContent>\n              </Card>\n            </ScrollReveal>\n          </div>\n        </div>\n\n        {relatedSolutions.length > 0 && (\n          <ScrollReveal className=\"mt-24\">\n            <h2 className=\"mb-8 text-center text-3xl font-bold text-white\">\n              Otras Soluciones\n            </h2>\n            <div className=\"grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\">\n              {relatedSolutions.map((related) => {\n                const RelatedIcon = getIcon(related.icon);\n                return (\n                  <motion.div\n                    key={related.slug}\n                    whileHover={{ y: -5, scale: 1.02 }}\n                  >\n                    <Link href={`/soluciones/${related.slug}`}>\n                      <Card className=\"group flex h-full flex-col border-slate-700/50 bg-slate-800/50 transition-colors hover:border-primary/50\">\n                        <CardHeader className=\"flex-row items-center gap-4\">\n                          <RelatedIcon className=\"h-8 w-8 text-primary\" />\n                          <CardTitle className=\"text-xl text-white transition-colors group-hover:text-primary\">\n                            {related.title}\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"flex-grow\">\n                          <p>{related.description}</p>\n                        </CardContent>\n                      </Card>\n                    </Link>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </ScrollReveal>\n        )}\n      </main>\n    </motion.div>\n  );\n}\n"
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "'use server';\n\nimport { notFound } from 'next/navigation';\nimport prisma from '@/lib/prisma';\nimport type { Solution } from '@prisma/client';\nimport { SolutionClientPage } from './client-page';\n\nasync function getSolutionBySlug(slug: string): Promise<Solution | null> {\n  return prisma.solution.findUnique({ where: { slug } });\n}\n\nasync function getRelatedSolutions(\n  currentSlug: string\n): Promise<Solution[]> {\n  return prisma.solution.findMany({\n    where: { NOT: { slug: currentSlug } },\n    take: 3,\n  });\n}\n\ntype SolutionDetailsPageProps = {\n  params: {\n    slug: string;\n  };\n};\n\nexport default async function SolutionDetailsPage({\n  params,\n}: SolutionDetailsPageProps) {\n  const [solution, relatedSolutions] = await Promise.all([\n    getSolutionBySlug(params.slug),\n    getRelatedSolutions(params.slug),\n  ]);\n\n  if (!solution) {\n    notFound();\n  }\n\n  return (\n    <SolutionClientPage\n      solution={solution}\n      relatedSolutions={relatedSolutions}\n    />\n  );\n}\n"
                }
              ]
            },
            {
              "name": "content.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { ServicesSection } from '@/components/landing/ServicesSection';\nimport { motion } from 'framer-motion';\nimport type { Solution } from '@prisma/client';\n\nexport function SolucionesPageContent({\n  solutions,\n}: {\n  solutions: Solution[];\n}) {\n  return (\n    <div className=\"bg-slate-950\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"container mx-auto px-4 text-center\"\n        >\n          <h1 className=\"text-4xl md:text-5xl font-bold\">Nuestras Soluciones</h1>\n          <p className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\">\n            Descubra c\u00f3mo podemos optimizar su proceso de empaque de principio a\n            fin con nuestra gama de servicios especializados.\n          </p>\n        </motion.div>\n      </header>\n      <main>\n        <ServicesSection solutions={solutions} />\n      </main>\n    </div>\n  );\n}\n"
            },
            {
              "name": "page.tsx",
              "type": "file",
              "content": "'use server';\n\nimport prisma from '@/lib/prisma';\nimport type { Solution } from '@prisma/client';\nimport { SolucionesPageContent } from './content';\n\nexport default async function SolucionesPage() {\n  const solutions: Solution[] = await prisma.solution.findMany({\n    orderBy: {\n      createdAt: 'asc',\n    },\n  });\n\n  return <SolucionesPageContent solutions={solutions} />;\n}\n"
            }
          ]
        },
        {
          "name": "terminos-de-servicio",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { ScrollReveal } from '@/components/animations/scroll-animations';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\n\nexport default function TerminosDeServicioPage() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return (\n    <div className=\"bg-slate-900 text-gray-300\">\n      <header className=\"bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-16 md:py-24\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <motion.h1\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"text-4xl md:text-5xl font-bold\"\n          >\n            T\u00e9rminos de Servicio\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"mt-4 text-lg text-gray-300 max-w-3xl mx-auto\"\n          >\n             \u00daltima actualizaci\u00f3n: {isClient ? new Date().toLocaleDateString('es-ES') : '24 de Julio, 2024'}\n          </motion.p>\n        </div>\n      </header>\n\n      <main className=\"py-16 md:py-24\">\n        <ScrollReveal className=\"container mx-auto px-4 max-w-4xl space-y-8\">\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              1. Aceptaci\u00f3n de los T\u00e9rminos\n            </h2>\n            <p>\n              Al acceder y utilizar nuestro sitio web y servicios, usted acepta\n              y se compromete a cumplir con estos T\u00e9rminos de Servicio y todas\n              las leyes y regulaciones aplicables. Si no est\u00e1 de acuerdo con\n              alguno de estos t\u00e9rminos, tiene prohibido usar o acceder a este\n              sitio.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              2. Uso del Servicio\n            </h2>\n            <p>\n              Se le concede un permiso limitado, no exclusivo y no transferible\n              para acceder y utilizar el servicio para fines personales y no\n              comerciales, sujeto a estos T\u00e9rminos. No debe utilizar el servicio\n              para ning\u00fan prop\u00f3sito ilegal o no autorizado.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              3. Propiedad Intelectual\n            </h2>\n            <p>\n              El Servicio y su contenido original, caracter\u00edsticas y\n              funcionalidad son y seguir\u00e1n siendo propiedad exclusiva de T & E\n              Empaques y Soluciones y sus licenciantes. El servicio est\u00e1\n              protegido por derechos de autor, marcas registradas y otras leyes\n              tanto de nuestro pa\u00eds como de pa\u00edses extranjeros.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              4. Limitaci\u00f3n de Responsabilidad\n            </h2>\n            <p>\n              En ning\u00fan caso T & E Empaques y Soluciones, ni sus directores,\n              empleados, socios, agentes, proveedores o afiliados, ser\u00e1n\n              responsables de ning\u00fan da\u00f1o indirecto, incidental, especial,\n              consecuente o punitivo, incluyendo, entre otros, la p\u00e9rdida de\n              ganancias, datos, uso, buena voluntad u otras p\u00e9rdidas\n              intangibles.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              5. Ley Aplicable\n            </h2>\n            <p>\n              Estos T\u00e9rminos se regir\u00e1n e interpretar\u00e1n de acuerdo con las leyes\n              de nuestro pa\u00eds, sin tener en cuenta sus disposiciones sobre\n              conflicto de leyes.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              6. Cambios a los T\u00e9rminos\n            </h2>\n            <p>\n              Nos reservamos el derecho, a nuestra sola discreci\u00f3n, de modificar\n              o reemplazar estos T\u00e9rminos en cualquier momento. Si una revisi\u00f3n\n              es material, intentaremos proporcionar un aviso con al menos 30\n              d\u00edas de anticipaci\u00f3n antes de que entren en vigor los nuevos\n              t\u00e9rminos.\n            </p>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold text-white mb-4\">\n              7. Contacto\n            </h2>\n            <p>\n              Si tiene alguna pregunta sobre estos T\u00e9rminos, por favor\n              cont\u00e1ctenos en:\n              <br />\n              <a\n                href=\"mailto:contacto@tempaques.com\"\n                className=\"text-primary hover:underline\"\n              >\n                contacto@tempaques.com\n              </a>\n            </p>\n          </section>\n        </ScrollReveal>\n      </main>\n    </div>\n  );\n}\n"
            }
          ]
        }
      ]
    },
    {
      "name": "components",
      "type": "directory",
      "children": [
        {
          "name": "Header.tsx",
          "type": "file",
          "content": "\n'use client';\nimport { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { Logo } from '@/components/logo';\nimport { Button } from '@/components/ui/button';\nimport {\n  Menu,\n  X,\n  Home,\n  Package,\n  ShoppingBag,\n  Briefcase,\n  HelpCircle,\n  Mail,\n} from 'lucide-react';\nimport { motion, AnimatePresence, type Variants } from 'framer-motion';\nimport {\n  StaggerContainer,\n  StaggerItem,\n} from '@/components/animations/motion-wrapper';\nimport type { LucideIcon } from 'lucide-react';\n\nexport function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (isMenuOpen) {\n      document.body.classList.add('no-scroll');\n    } else {\n      document.body.classList.remove('no-scroll');\n    }\n    return () => {\n      document.body.classList.remove('no-scroll');\n    };\n  }, [isMenuOpen]);\n\n  const navLinks: { href: string; label: string; icon: LucideIcon }[] = [\n    { href: '/', label: 'Inicio', icon: Home },\n    { href: '/soluciones', label: 'Soluciones', icon: Package },\n    { href: '/products', label: 'Productos', icon: ShoppingBag },\n    { href: '/proyectos', label: 'Proyectos', icon: Briefcase },\n    {\n      href: '/preguntas-frecuentes',\n      label: 'Preguntas Frecuentes',\n      icon: HelpCircle,\n    },\n    { href: '/contacto', label: 'Contacto', icon: Mail },\n  ];\n\n  const mobileMenuVariants: Variants = {\n    open: {\n      x: 0,\n      transition: { type: 'spring', stiffness: 300, damping: 30 },\n    },\n    closed: {\n      x: '100%',\n      transition: { type: 'spring', stiffness: 300, damping: 30 },\n    },\n  };\n\n  const overlayVariants: Variants = {\n    open: { opacity: 1, pointerEvents: 'auto' as const },\n    closed: { opacity: 0, pointerEvents: 'none' as const },\n  };\n\n  return (\n    <header className=\"bg-[#1a2435] text-white sticky top-0 z-50 shadow-md\">\n      <div className=\"container mx-auto px-4 flex justify-between items-center h-16\">\n        <Logo />\n        <nav className=\"hidden md:flex\">\n          <StaggerContainer\n            as=\"ul\"\n            className=\"flex items-center space-x-6\"\n            staggerChildren={0.1}\n          >\n            {navLinks.map((link) => {\n               const Icon = link.icon;\n               return (\n                <StaggerItem as=\"li\" key={link.href}>\n                  <Link\n                    href={link.href}\n                    className=\"relative text-gray-300 hover:text-white transition-colors py-2 flex items-center gap-2\"\n                  >\n                    <Icon className=\"size-4\" />\n                    <span>{link.label}</span>\n                    <motion.div\n                      className=\"absolute bottom-0 left-0 h-[2px] bg-primary\"\n                      initial={{ width: 0 }}\n                      whileHover={{ width: '100%' }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </Link>\n                </StaggerItem>\n               )\n            })}\n          </StaggerContainer>\n        </nav>\n        <div className=\"md:hidden\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            aria-label=\"Toggle menu\"\n          >\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={isMenuOpen ? 'x' : 'menu'}\n                initial={{ rotate: -90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: 90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                {isMenuOpen ? <X size={24} /> : <Menu size={24} />}\n              </motion.div>\n            </AnimatePresence>\n          </Button>\n        </div>\n      </div>\n\n      <AnimatePresence>\n        {isMenuOpen && (\n          <>\n            <motion.div\n              variants={overlayVariants}\n              initial=\"closed\"\n              animate=\"open\"\n              exit=\"closed\"\n              onClick={() => setIsMenuOpen(false)}\n              className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n            />\n            <motion.div\n              variants={mobileMenuVariants}\n              initial=\"closed\"\n              animate=\"open\"\n              exit=\"closed\"\n              className=\"fixed top-0 right-0 h-full w-4/5 max-w-sm bg-[#1a2435] shadow-2xl z-50 md:hidden\"\n            >\n              <nav className=\"h-full flex flex-col\">\n                <div className=\"flex justify-between items-center p-4 border-b border-slate-700\">\n                    <Logo />\n                    <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => setIsMenuOpen(false)}\n                        aria-label=\"Close menu\"\n                    >\n                        <X size={24} />\n                    </Button>\n                </div>\n                <StaggerContainer\n                  as=\"ul\"\n                  className=\"flex flex-col p-4 space-y-2\"\n                  staggerChildren={0.07}\n                  delayChildren={0.2}\n                >\n                  {navLinks.map((link) => {\n                    const Icon = link.icon;\n                    return (\n                      <StaggerItem\n                        as=\"li\"\n                        key={link.href}\n                        className=\"w-full\"\n                      >\n                        <Link\n                          href={link.href}\n                          className=\"flex items-center gap-3 w-full p-3 text-lg text-gray-300 hover:text-primary hover:bg-slate-700/50 rounded-md transition-colors\"\n                          onClick={() => setIsMenuOpen(false)}\n                        >\n                          <Icon className=\"size-5\" />\n                          <span>{link.label}</span>\n                        </Link>\n                      </StaggerItem>\n                    );\n                  })}\n                </StaggerContainer>\n              </nav>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </header>\n  );\n}\n"
        },
        {
          "name": "PwaInstaller.tsx",
          "type": "file",
          "content": "'use client';\n\nimport { useEffect } from 'react';\n\nexport default function PwaInstaller() {\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        navigator.serviceWorker\n          .register('/sw.js')\n          .then((registration) => {\n            console.log(\n              'Service Worker registered with scope:',\n              registration.scope\n            );\n          })\n          .catch((error) => {\n            console.error('Service Worker registration failed:', error);\n          });\n      });\n    }\n  }, []);\n\n  return null;\n}\n"
        },
        {
          "name": "ai-content-suggester.tsx",
          "type": "file",
          "content": "'use client';\n\nimport { useFormState, useFormStatus } from 'react-dom';\nimport { getSuggestions, type FormState } from '@/app/actions';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lightbulb, Loader2, FileText } from 'lucide-react';\nimport { useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst initialState: FormState = {\n  message: null,\n  data: null,\n  error: false,\n};\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button type=\"submit\" disabled={pending} className=\"w-full sm:w-auto\">\n      {pending ? (\n        <>\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          Generando...\n        </>\n      ) : (\n        <>\n          <Lightbulb className=\"mr-2 h-4 w-4\" />\n          Generar Ideas\n        </>\n      )}\n    </Button>\n  );\n}\n\nexport default function AIContentSuggester() {\n  const [state, formAction] = useFormState(getSuggestions, initialState);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if(state.message && state.error) {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: state.message,\n      })\n    }\n  }, [state, toast]);\n\n\n  return (\n    <div className=\"mx-auto max-w-3xl\">\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-2xl\">\n            <Lightbulb className=\"text-primary\" />\n            <span>Asistente de Contenido IA</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"mb-4 text-muted-foreground\">\n            Describe las necesidades de tu cliente o el objetivo de tu contenido, y nuestra IA te\n            proporcionar\u00e1 algunas ideas creativas para empezar.\n          </p>\n          <form action={formAction} className=\"space-y-4\">\n            <Textarea\n              name=\"userNeeds\"\n              placeholder=\"Ej: 'Necesito contenido para una nueva l\u00ednea de empaques ecol\u00f3gicos para alimentos. El objetivo es destacar que son biodegradables y seguros para el contacto con alimentos...'\"\n              rows={5}\n              required\n              className=\"resize-none\"\n            />\n            <div className=\"flex justify-end\">\n              <SubmitButton />\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {state.data?.contentSuggestions && state.data.contentSuggestions.length > 0 && (\n        <div className=\"mt-8 space-y-6\">\n            <h2 className=\"text-2xl font-semibold text-center\">Ideas de Contenido Sugeridas</h2>\n            <div className=\"grid gap-4 md:grid-cols-2\">\n            {state.data.contentSuggestions.map((suggestion, index) => (\n                <Card key={index} className=\"transform transition-transform hover:scale-105\">\n                <CardHeader className=\"flex flex-row items-center gap-3 space-y-0 pb-2\">\n                    <div className=\"p-2 rounded-full bg-primary/10\">\n                        <FileText className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-lg font-medium\">Sugerencia #{index + 1}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-muted-foreground\">{suggestion}</p>\n                </CardContent>\n                </Card>\n            ))}\n            </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
        },
        {
          "name": "animations",
          "type": "directory",
          "children": [
            {
              "name": "motion-wrapper.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { motion, type Variants } from 'framer-motion';\nimport type { ElementType, ReactNode } from 'react';\n\ntype MotionWrapperProps = {\n  children: React.ReactNode;\n  className?: string;\n  variants?: Variants;\n};\n\n// A wrapper that applies a simple fade-in or slide-in animation\nexport function MotionWrapper({\n  children,\n  className,\n  variants,\n}: MotionWrapperProps) {\n  const defaultVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },\n  };\n\n  return (\n    <motion.div\n      initial=\"hidden\"\n      animate=\"visible\"\n      variants={variants || defaultVariants}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype StaggerContainerProps = {\n  children: ReactNode;\n  className?: string;\n  staggerChildren?: number;\n  delayChildren?: number;\n  as?: ElementType;\n};\n\n// A container for staggered animations\nexport const StaggerContainer = ({\n  children,\n  className,\n  staggerChildren = 0.1,\n  delayChildren = 0,\n  as: Component = 'div',\n}: StaggerContainerProps) => {\n  const variants: Variants = {\n    hidden: {},\n    visible: {\n      transition: {\n        staggerChildren,\n        delayChildren,\n      },\n    },\n  };\n\n  const MotionComponent = motion(Component);\n\n  return (\n    <MotionComponent\n      variants={variants}\n      initial=\"hidden\"\n      whileInView=\"visible\"\n      viewport={{ once: true }}\n      className={className}\n    >\n      {children}\n    </MotionComponent>\n  );\n};\n\ntype StaggerItemProps = {\n  children: ReactNode;\n  className?: string;\n  as?: ElementType;\n  variants?: Variants;\n};\n\n// An item for staggered animations\nexport const StaggerItem = ({\n  children,\n  className,\n  as: Component = 'div',\n  variants,\n}: StaggerItemProps) => {\n  const defaultVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  const MotionComponent = motion(Component);\n\n  return (\n    <MotionComponent\n      variants={variants || defaultVariants}\n      className={className}\n    >\n      {children}\n    </MotionComponent>\n  );\n};\n"
            },
            {
              "name": "scroll-animations.tsx",
              "type": "file",
              "content": "'use client';\n\nimport {\n  motion,\n  useInView,\n  useScroll,\n  type Variants,\n  useTransform,\n} from 'framer-motion';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { cn } from '@/lib/utils';\n\ntype ScrollRevealProps = {\n  children: React.ReactNode;\n  className?: string;\n  variants?: Variants;\n};\n\n// A component to reveal content as it scrolls into view\nexport function ScrollReveal({\n  children,\n  className,\n  variants,\n}: ScrollRevealProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.2 });\n\n  const defaultVariants: Variants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.7, ease: 'easeOut' },\n    },\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      variants={variants || defaultVariants}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\n// A component to display a scroll progress bar\nexport function ScrollProgress({ className }: { className?: string }) {\n  const { scrollYProgress } = useScroll();\n\n  return (\n    <motion.div\n      className={cn(\n        'fixed top-0 left-0 right-0 h-1 bg-primary origin-[0%]',\n        className\n      )}\n      style={{ scaleX: scrollYProgress, zIndex: 100 }}\n    />\n  );\n}\n\nexport const ScrollStaggerContainer = ({\n  children,\n  className,\n  staggerChildren = 0.1,\n  delayChildren = 0,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n  staggerChildren?: number;\n  delayChildren?: number;\n  [key: string]: unknown;\n}) => {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.1 });\n\n  const variants: Variants = {\n    hidden: {},\n    visible: {\n      transition: {\n        staggerChildren,\n        delayChildren,\n      },\n    },\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      variants={variants}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      className={className}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nexport const ScrollStaggerItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n  [key: string]: unknown;\n}) => {\n  const defaultVariants: Variants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <motion.div variants={defaultVariants} className={className} {...props}>\n      {children}\n    </motion.div>\n  );\n};\n\nexport const FloatingElement = ({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) => {\n  const [duration, setDuration] = useState(20);\n\n  useEffect(() => {\n    setDuration(Math.random() * 5 + 15);\n  }, []);\n\n  return (\n    <motion.div\n      animate={{\n        y: ['-5%', '5%', '-5%'],\n        rotate: [0, 5, 0],\n      }}\n      transition={{\n        duration: duration,\n        ease: 'easeInOut',\n        repeat: Infinity,\n        repeatType: 'mirror',\n      }}\n      className={className}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nexport const ParallaxText = ({\n  children,\n  className,\n  speed = 0.5,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  speed?: number;\n}) => {\n  const ref = useRef(null);\n  const { scrollYProgress } = useScroll({\n    target: ref,\n    offset: ['start start', 'end start'],\n  });\n  const y = useTransform(scrollYProgress, [0, 1], ['0%', `${-100 * speed}%`]);\n\n  return (\n    <div\n      ref={ref}\n      className={cn('overflow-hidden', className)}\n      style={{ position: 'relative' }}\n    >\n      <motion.div style={{ y }}>{children}</motion.div>\n    </div>\n  );\n};\n"
            }
          ]
        },
        {
          "name": "background",
          "type": "directory",
          "children": [
            {
              "name": "custom-particles.tsx",
              "type": "file",
              "content": "'use client';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\n\nconst NUM_PARTICLES = 50;\n\ntype ParticleInfo = {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n};\n\nexport function CustomParticles() {\n  const [particles, setParticles] = useState<ParticleInfo[]>([]);\n\n  useEffect(() => {\n    const newParticles = Array.from({ length: NUM_PARTICLES }).map((_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 3 + 1,\n      duration: Math.random() * 10 + 10,\n      delay: Math.random() * 5,\n    }));\n    setParticles(newParticles);\n  }, []);\n\n  if(!particles.length) return null;\n\n  return (\n    <div className=\"fixed inset-0 w-full h-full z-0 pointer-events-none\">\n      {particles.map((p) => (\n        <motion.div\n          key={p.id}\n          className=\"absolute rounded-full bg-slate-700/50\"\n          style={{\n            left: `${p.x}%`,\n            top: `${p.y}%`,\n            width: p.size,\n            height: p.size,\n          }}\n          animate={{\n            x: [0, (Math.random() - 0.5) * 200, 0],\n            y: [0, (Math.random() - 0.5) * 200, 0],\n          }}\n          transition={{\n            duration: p.duration,\n            repeat: Infinity,\n            repeatType: 'mirror',\n            ease: 'easeInOut',\n            delay: p.delay,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "common",
          "type": "directory",
          "children": [
            {
              "name": "AnimatedCounter.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { useInView, useMotionValue, useSpring } from 'framer-motion';\n\ntype AnimatedCounterProps = {\n  value: number;\n  className?: string;\n};\n\nexport function AnimatedCounter({ value, className }: AnimatedCounterProps) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const motionValue = useMotionValue(0);\n  const springValue = useSpring(motionValue, {\n    damping: 100,\n    stiffness: 100,\n  });\n  const isInView = useInView(ref, { once: true, margin: '-100px' });\n\n  useEffect(() => {\n    if (isInView) {\n      motionValue.set(value);\n    }\n  }, [motionValue, isInView, value]);\n\n  useEffect(\n    () =>\n      springValue.on('change', (latest) => {\n        if (ref.current) {\n          ref.current.textContent = Intl.NumberFormat('en-US').format(\n            Math.round(latest)\n          );\n        }\n      }),\n    [springValue]\n  );\n\n  return <span className={className} ref={ref} />;\n}\n"
            },
            {
              "name": "BackToTopButton.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nexport function BackToTopButton() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const toggleVisibility = () => {\n    if (window.scrollY > 300) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', toggleVisibility);\n\n    return () => {\n      window.removeEventListener('scroll', toggleVisibility);\n    };\n  }, []);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: 100 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 100 }}\n          transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n          className=\"fixed bottom-4 right-4 z-50\"\n        >\n          <Button\n            variant=\"default\"\n            size=\"icon\"\n            onClick={scrollToTop}\n            className=\"rounded-full shadow-lg\"\n          >\n            <ArrowUp className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Volver arriba</span>\n          </Button>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n"
            },
            {
              "name": "ClientSectionsWrapper.tsx",
              "type": "file",
              "content": "'use client';\n\nimport type { Product, CaseStudy, Solution } from '@prisma/client';\nimport { HeroSection } from '@/components/landing/HeroSection';\nimport { ServicesSection } from '@/components/landing/ServicesSection';\nimport ProductCarouselSection from '@/components/sections/product-carousel-section';\nimport { CtaSection } from '@/components/landing/CtaSection';\nimport { StatsSection } from '@/components/sections/stats-section';\nimport FeaturedProjectsSection from '@/components/landing/FeaturedProjectsSection';\nimport ContactFormSection from '@/components/sections/contact-form-section';\nimport LazyMapWrapper from '@/components/common/LazyMapWrapper';\nimport TestimonialsSection from '@/components/sections/testimonials-section';\nimport FAQSection from '@/components/sections/faq-section';\n\ntype ClientSectionsWrapperProps = {\n  products: Product[];\n  caseStudies: CaseStudy[];\n  solutions: Solution[];\n};\n\nexport default function ClientSectionsWrapper({\n  products,\n  caseStudies,\n  solutions,\n}: ClientSectionsWrapperProps) {\n  return (\n    <>\n      <HeroSection />\n      <ServicesSection id=\"soluciones\" solutions={solutions} />\n      <ProductCarouselSection products={products} />\n      <CtaSection />\n      <StatsSection />\n      <FeaturedProjectsSection id=\"proyectos\" caseStudies={caseStudies} />\n      <TestimonialsSection />\n      <FAQSection />\n      <ContactFormSection />\n      <LazyMapWrapper />\n    </>\n  );\n}\n"
            },
            {
              "name": "LazyMapWrapper.tsx",
              "type": "file",
              "content": "'use client';\n\nimport dynamic from 'next/dynamic';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nconst LazyMap = dynamic(\n  () => import('@/components/landing/map-section').then((mod) => mod.MapSection),\n  {\n    loading: () => <Skeleton className=\"h-[500px] w-full rounded-2xl\" />,\n    ssr: false,\n  }\n);\n\nexport default function LazyMapWrapper() {\n  return <LazyMap />;\n}\n"
            }
          ]
        },
        {
          "name": "footer.tsx",
          "type": "file",
          "content": "\n'use client';\nimport Link from 'next/link';\nimport { Logo } from '@/components/logo';\nimport {\n  Facebook,\n  Instagram,\n  Linkedin,\n  Home,\n  Package,\n  ShoppingBag,\n  Briefcase,\n  Mail,\n  Shield,\n  FileText,\n  MapPin,\n  Phone,\n} from 'lucide-react';\nimport { companyData } from '@/lib/data';\nimport {\n  ScrollReveal,\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from './animations/scroll-animations';\nimport { motion } from 'framer-motion';\nimport { useEffect, useState } from 'react';\n\nconst footerLinks = [\n  { href: '/', label: 'Inicio', icon: Home },\n  { href: '/soluciones', label: 'Soluciones', icon: Package },\n  { href: '/products', label: 'Productos', icon: ShoppingBag },\n  { href: '/proyectos', label: 'Proyectos', icon: Briefcase },\n  { href: '/contacto', label: 'Contacto', icon: Mail },\n];\n\nconst legalLinks = [\n  {\n    href: '/politica-de-privacidad',\n    label: 'Pol\u00edtica de Privacidad',\n    icon: Shield,\n  },\n  {\n    href: '/terminos-de-servicio',\n    label: 'T\u00e9rminos de Servicio',\n    icon: FileText,\n  },\n];\n\nconst socialLinks = [\n  {\n    href: companyData.socials.facebook,\n    label: 'Facebook',\n    icon: Facebook,\n  },\n  {\n    href: companyData.socials.linkedin,\n    label: 'LinkedIn',\n    icon: Linkedin,\n  },\n  {\n    href: companyData.socials.instagram,\n    label: 'Instagram',\n    icon: Instagram,\n  },\n];\n\nexport function Footer() {\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n    setYear(new Date().getFullYear());\n  }, []);\n\n  const googleMapsLink = `https://www.google.com/maps/search/?api=1&query=${companyData.location.lat},${companyData.location.lng}`;\n  return (\n    <ScrollReveal>\n      <footer className=\"bg-slate-950 text-white border-t border-slate-700/50\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <ScrollStaggerContainer className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {/* Columna 1: Logo y Redes Sociales */}\n            <ScrollStaggerItem className=\"space-y-4\">\n              <Logo />\n              <p className=\"text-gray-400 text-sm\">\n                Soluciones de empaque innovadoras y personalizadas para potenciar\n                su marca y proteger su producto.\n              </p>\n              <div className=\"flex space-x-4\">\n                {socialLinks.map((social) => (\n                  <motion.a\n                    key={social.label}\n                    href={social.href}\n                    aria-label={social.label}\n                    className=\"text-gray-400 hover:text-primary transition-colors\"\n                    whileHover={{ scale: 1.2, rotate: -10 }}\n                    whileTap={{ scale: 0.9 }}\n                  >\n                    <social.icon size={20} />\n                  </motion.a>\n                ))}\n              </div>\n            </ScrollStaggerItem>\n\n            {/* Columna 2: Navegaci\u00f3n */}\n            <ScrollStaggerItem>\n              <motion.h2\n                className=\"font-semibold text-primary text-lg md:text-xl mb-4 relative inline-block\"\n                initial=\"rest\"\n                whileHover=\"hover\"\n                animate=\"rest\"\n              >\n                Navegaci\u00f3n\n                <motion.div\n                  className=\"absolute bottom-0 left-0 h-[2px] bg-primary\"\n                  variants={{\n                    rest: { width: 0 },\n                    hover: { width: '100%' },\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n              </motion.h2>\n              <ul className=\"space-y-2\">\n                {footerLinks.map((link) => (\n                  <li key={link.href}>\n                    <motion.div\n                      whileHover={{ y: -2 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <Link\n                        href={link.href}\n                        className=\"flex items-center gap-2 text-gray-300 hover:text-primary transition-colors\"\n                      >\n                        <link.icon size={16} />\n                        <span>{link.label}</span>\n                      </Link>\n                    </motion.div>\n                  </li>\n                ))}\n              </ul>\n            </ScrollStaggerItem>\n\n            {/* Columna 3: Legal */}\n            <ScrollStaggerItem>\n               <motion.h2\n                className=\"font-semibold text-primary text-lg md:text-xl mb-4 relative inline-block\"\n                initial=\"rest\"\n                whileHover=\"hover\"\n                animate=\"rest\"\n              >\n                Legal\n                <motion.div\n                  className=\"absolute bottom-0 left-0 h-[2px] bg-primary\"\n                  variants={{\n                    rest: { width: 0 },\n                    hover: { width: '100%' },\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n              </motion.h2>\n              <ul className=\"space-y-2\">\n                {legalLinks.map((link) => (\n                  <li key={link.href}>\n                    <motion.div\n                      whileHover={{ y: -2 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <Link\n                        href={link.href}\n                        className=\"flex items-center gap-2 text-gray-300 hover:text-primary transition-colors\"\n                      >\n                        <link.icon size={16} />\n                        <span>{link.label}</span>\n                      </Link>\n                    </motion.div>\n                  </li>\n                ))}\n              </ul>\n            </ScrollStaggerItem>\n\n            {/* Columna 4: Contacto */}\n            <ScrollStaggerItem>\n               <motion.h2\n                className=\"font-semibold text-primary text-lg md:text-xl mb-4 relative inline-block\"\n                initial=\"rest\"\n                whileHover=\"hover\"\n                animate=\"rest\"\n              >\n                Ponerse en contacto\n                <motion.div\n                  className=\"absolute bottom-0 left-0 h-[2px] bg-primary\"\n                  variants={{\n                    rest: { width: 0 },\n                    hover: { width: '100%' },\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n              </motion.h2>\n              <ul className=\"space-y-3 text-gray-300 text-sm\">\n                <li className=\"flex items-start gap-3\">\n                  <MapPin size={16} className=\"mt-0.5 shrink-0 text-gray-400\" />\n                   <a\n                    href={googleMapsLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-primary transition-colors\"\n                  >\n                    {companyData.address}\n                  </a>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Mail size={16} className=\"mt-0.5 shrink-0 text-gray-400\" />\n                  <motion.div\n                    whileHover={{ y: -2 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <a\n                      href={`mailto:${companyData.email}`}\n                      className=\"hover:text-primary transition-colors\"\n                    >\n                      {companyData.email}\n                    </a>\n                  </motion.div>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <Phone size={16} className=\"mt-0.5 shrink-0 text-gray-400\" />\n                  <motion.div\n                    whileHover={{ y: -2 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <a\n                      href={companyData.phone.href}\n                      className=\"hover:text-primary transition-colors\"\n                    >\n                      {companyData.phone.number}\n                    </a>\n                  </motion.div>\n                </li>\n              </ul>\n            </ScrollStaggerItem>\n          </ScrollStaggerContainer>\n\n          <div className=\"border-t border-slate-700 mt-8 pt-6 text-center text-sm text-gray-500\">\n            <p>\n              &copy; {isClient ? year : new Date().getFullYear()} T & E Empaques y Soluciones.\n              Todos los derechos reservados.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </ScrollReveal>\n  );\n}\n"
        },
        {
          "name": "landing",
          "type": "directory",
          "children": [
            {
              "name": "AnimatedButton.tsx",
              "type": "file",
              "content": "'use client';\n\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\n\nexport function AnimatedButton({ href, text }: { href: string; text: string }) {\n  return (\n    <motion.div\n        whileHover={{ scale: 1.05, boxShadow: '0 0 20px hsla(var(--primary), 0.3)' }}\n        whileTap={{ scale: 0.95 }}\n        transition={{ type: 'spring', stiffness: 400, damping: 17 }}\n    >\n      <Link href={href}>\n        <Button\n          variant=\"outline\"\n          className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n        >\n          {text}\n        </Button>\n      </Link>\n    </motion.div>\n  );\n}\n"
            },
            {
              "name": "CaseStudyCard.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { motion } from 'framer-motion';\nimport type { CaseStudy } from '@prisma/client';\n\ntype CaseStudyCardProps = {\n  caseStudy: CaseStudy;\n};\n\nexport function CaseStudyCard({ caseStudy }: CaseStudyCardProps) {\n  return (\n    <Link href={`/proyectos/${caseStudy.slug}`} className=\"group block h-full\">\n      <motion.div\n        className=\"h-full\"\n        whileHover={{ y: -5, scale: 1.02 }}\n        transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n      >\n        <Card className=\"h-full overflow-hidden bg-slate-800/50 border-slate-700/50 backdrop-blur-sm transition-all duration-300 group-hover:border-primary/50\">\n          <div className=\"overflow-hidden aspect-[4/3] relative\">\n            <Image\n              src={caseStudy.imageUrl}\n              alt={caseStudy.imageAlt}\n              fill\n              sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n              className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n              data-ai-hint={caseStudy.dataAiHint ?? 'case study image'}\n            />\n          </div>\n          <CardHeader>\n            <CardTitle className=\"text-xl group-hover:text-primary transition-colors text-white\">\n              {caseStudy.title}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-300\">{caseStudy.shortDescription}</p>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </Link>\n  );\n}\n"
            },
            {
              "name": "ContactForm.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\n\nconst formSchema = z.object({\n  name: z.string().min(2, 'El nombre debe tener al menos 2 caracteres.'),\n  email: z.string().email('Por favor, introduce un email v\u00e1lido.'),\n  subject: z.string().min(5, 'El asunto debe tener al menos 5 caracteres.'),\n  message: z\n    .string()\n    .min(10, 'El mensaje debe tener al menos 10 caracteres.'),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function ContactForm() {\n  const { toast } = useToast();\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<FormData> = async (data) => {\n    // Aqu\u00ed es donde enviar\u00edas los datos del formulario a tu backend.\n    // Por ahora, solo simularemos un env\u00edo exitoso.\n    console.log(data);\n\n    toast({\n      title: '\u00a1Mensaje Enviado!',\n      description:\n        'Gracias por contactarnos. Te responderemos a la brevedad.',\n      variant: 'default',\n    });\n\n    form.reset();\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nombre Completo</FormLabel>\n              <FormControl>\n                <Input placeholder=\"John Doe\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Correo Electr\u00f3nico</FormLabel>\n              <FormControl>\n                <Input placeholder=\"email@ejemplo.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"subject\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Asunto</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Cotizaci\u00f3n para empaques\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"message\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Mensaje</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Escribe tu mensaje aqu\u00ed...\"\n                  className=\"resize-none\"\n                  rows={5}\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? 'Enviando...' : 'Enviar Mensaje'}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n"
            },
            {
              "name": "CtaSection.tsx",
              "type": "file",
              "content": "import Link from 'next/link';\nimport { Button } from '@/components/ui/button';\n\nexport function CtaSection() {\n  return (\n    <section className=\"py-16 md:py-24 bg-zinc-900\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 p-8 md:p-12 rounded-lg shadow-lg flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"text-center md:text-left\">\n            <h2 className=\"text-3xl font-bold text-white\">\n              \u00bfListos para transformar su empaque?\n            </h2>\n            <p className=\"mt-2 text-lg text-gray-300\">\n              Nuestro equipo de expertos est\u00e1 preparado para crear la soluci\u00f3n perfecta que su producto merece.\n            </p>\n          </div>\n          <div className=\"mt-6 md:mt-0 flex-shrink-0\">\n            <Link href=\"/contacto\">\n              <Button\n                size=\"lg\"\n                className=\"bg-[#9ada34] text-[#1a2435] hover:bg-[#9ada34]/90\"\n              >\n                Solicitar una Cotizaci\u00f3n\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
            },
            {
              "name": "FeaturedProjectsSection.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { CaseStudyCard } from './CaseStudyCard';\nimport {\n  ScrollStaggerContainer,\n} from '../animations/scroll-animations';\nimport type { CaseStudy } from '@prisma/client';\nimport { AnimatedButton } from './AnimatedButton';\nimport { motion, type Variants } from 'framer-motion';\n\nexport default function FeaturedProjectsSection({\n  id,\n  caseStudies,\n}: {\n  id?: string;\n  caseStudies: CaseStudy[];\n}) {\n  const cardVariants: Variants = {\n    hidden: (i: number) => ({\n      opacity: 0,\n      x: i % 3 === 0 ? -50 : i % 3 === 2 ? 50 : 0,\n      y: i % 3 === 1 ? 20 : 0,\n    }),\n    visible: {\n      opacity: 1,\n      x: 0,\n      y: 0,\n      transition: {\n        type: 'spring',\n        stiffness: 100,\n        damping: 20,\n      },\n    },\n  };\n\n  return (\n    <section id={id} className=\"py-16 md:py-24 bg-slate-900\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"mx-auto max-w-3xl text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white\">\n            Casos de \u00c9xito\n          </h2>\n          <p className=\"text-lg text-gray-300 mt-4\">\n            Estamos orgullosos del impacto que hemos generado para nuestros\n            clientes.\n          </p>\n        </div>\n        <ScrollStaggerContainer\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\"\n          staggerChildren={0.1}\n        >\n          {caseStudies.map((study, i) => (\n            <motion.div\n              key={study.id}\n              custom={i}\n              variants={cardVariants}\n              initial=\"hidden\"\n              whileInView=\"visible\"\n              viewport={{ once: true, amount: 0.3 }}\n            >\n              <CaseStudyCard caseStudy={study} />\n            </motion.div>\n          ))}\n        </ScrollStaggerContainer>\n        <div className=\"text-center mt-16\">\n          <AnimatedButton href=\"/proyectos\" text=\"Ver todos los proyectos\" />\n        </div>\n      </div>\n    </section>\n  );\n}\n"
            },
            {
              "name": "HeroSection.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { motion } from 'framer-motion';\nimport { StaggerContainer, StaggerItem } from '../animations/motion-wrapper';\nimport { FloatingElement } from '../animations/scroll-animations';\nimport { Star } from 'lucide-react';\n\nfunction GridPattern() {\n  return (\n    <motion.div\n      aria-hidden=\"true\"\n      className=\"pointer-events-none absolute inset-0 -z-10\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 1, delay: 0.5 }}\n    >\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_120%,rgba(154,218,52,0.08),transparent_40%)]\" />\n      <svg\n        className=\"absolute inset-0 h-full w-full stroke-slate-700/50 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]\"\n        aria-hidden=\"true\"\n      >\n        <defs>\n          <pattern\n            id=\"83fd4e5a-9d52-4224-a64E-101Fc2ad32b6\"\n            width={100}\n            height={100}\n            x=\"50%\"\n            y={-1}\n            patternUnits=\"userSpaceOnUse\"\n          >\n            <path d=\"M.5 200V.5H200\" fill=\"none\" />\n          </pattern>\n        </defs>\n        <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill=\"url(#83fd4e5a-9d52-4224-a64E-101Fc2ad32b6)\" />\n      </svg>\n    </motion.div>\n  );\n}\n\n\nexport function HeroSection() {\n  return (\n    <section className=\"relative bg-gradient-to-r from-[#1a2435] to-[#0e413b] text-white py-20 md:py-32 overflow-hidden\">\n      <GridPattern />\n      <FloatingElement className=\"absolute top-20 -left-20 w-64 h-64 bg-primary/10 rounded-full opacity-50 blur-3xl\" >\n        <div/>\n      </FloatingElement>\n      <FloatingElement className=\"absolute bottom-10 -right-20 w-72 h-72 bg-slate-500/10 rounded-full opacity-50 blur-3xl\">\n        <div/>\n      </FloatingElement>\n\n      <div\n        className=\"container mx-auto px-4 text-center relative z-10\"\n      >\n        <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n          Soluciones de empaque{' '}\n          <motion.span\n            className=\"text-primary inline-block\"\n            initial={{ opacity: 0, y: -20, filter: 'blur(5px)' }}\n            animate={{ opacity: 1, y: 0, filter: 'blur(0px)' }}\n            transition={{ delay: 0.4, duration: 0.5, type: 'spring' }}\n            style={{ textShadow: '0 0 15px hsla(var(--primary), 0.5)' }}\n          >\n            personalizadas\n          </motion.span>\n        </h1>\n        \n        <p className=\"max-w-3xl mx-auto mb-8 text-lg text-gray-300\">\n          Proveemos productos y soluciones de empaque personalizadas para\n          art\u00edculos escolares, papeler\u00eda, accesorios el\u00e9ctricos, cosm\u00e9ticos,\n          did\u00e1cticos, mercer\u00eda y m\u00e1s.\n        </p>\n        \n        <StaggerContainer\n          as=\"div\"\n          className=\"flex justify-center items-center flex-col sm:flex-row gap-4 mb-8\"\n          staggerChildren={0.15}\n          delayChildren={0.7}\n        >\n          <StaggerItem variants={{ hidden: { opacity: 0, scale: 0.8 }, visible: { opacity: 1, scale: 1, transition: { type: 'spring', stiffness: 300, damping: 15 } } }}>\n            <motion.div\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px hsla(var(--primary), 0.4)' }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <Button\n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg border border-primary/50\"\n              >\n                Solicitar cotizaci\u00f3n\n              </Button>\n            </motion.div>\n          </StaggerItem>\n          <StaggerItem variants={{ hidden: { opacity: 0, scale: 0.8 }, visible: { opacity: 1, scale: 1, transition: { type: 'spring', stiffness: 300, damping: 15 } } }}>\n            <motion.div\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px hsla(var(--primary), 0.2)' }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n              >\n                Ver nuestros productos\n              </Button>\n            </motion.div>\n          </StaggerItem>\n        </StaggerContainer>\n        <StaggerContainer\n          className=\"flex items-center justify-center space-x-2\"\n          staggerChildren={0.1}\n          delayChildren={1.2}\n        >\n            {Array.from({ length: 5 }).map((_, i) => (\n              <StaggerItem key={i} variants={{ hidden: { opacity: 0, y: 10 }, visible: { opacity: 1, y: 0 }}}>\n                <Star className=\"w-5 h-5 text-yellow-400\" fill=\"currentColor\"/>\n              </StaggerItem>\n            ))}\n             <StaggerItem variants={{ hidden: { opacity: 0, y: 10 }, visible: { opacity: 1, y: 0 }}}>\n              <p className=\"text-sm text-gray-400 ml-2\">Calificado 4.9/5 por m\u00e1s de 500 clientes</p>\n            </StaggerItem>\n        </StaggerContainer>\n      </div>\n    </section>\n  );\n}\n"
            },
            {
              "name": "ProductCard.tsx",
              "type": "file",
              "content": "\n'use client';\nimport type { Product } from '@prisma/client';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ntype ProductCardProps = {\n  product: Product;\n};\n\nexport function ProductCard({ product }: ProductCardProps) {\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.8 }}\n      whileHover={{ scale: 1.05, y: -5 }}\n      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n      className=\"h-full\"\n    >\n      <Link href={`/products/${product.slug}`} className=\"block h-full group\">\n        <Card className=\"h-full overflow-hidden bg-slate-800/50 border-slate-700/50 flex flex-col\">\n          <div className=\"relative overflow-hidden aspect-[4/3]\">\n            <Image\n              src={product.imageUrl}\n              alt={product.imageAlt}\n              fill\n              sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n              className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n              data-ai-hint={product.dataAiHint ?? 'product image'}\n            />\n            <Badge\n              variant=\"default\"\n              className=\"absolute top-2 right-2 bg-primary/80 backdrop-blur-sm\"\n            >\n              {product.category}\n            </Badge>\n          </div>\n          <CardHeader>\n            <CardTitle className=\"text-white\">{product.name}</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-grow\">\n            <p className=\"text-muted-foreground text-sm\">\n              {product.description}\n            </p>\n          </CardContent>\n        </Card>\n      </Link>\n    </motion.div>\n  );\n}\n"
            },
            {
              "name": "ProductsContent.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport { useState } from 'react';\nimport type { Product } from '@prisma/client';\nimport { Button } from '@/components/ui/button';\nimport { ProductCard } from './ProductCard';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nexport function ProductsContent({ products }: { products: Product[] }) {\n  const [activeCategory, setActiveCategory] = useState('Todos');\n\n  if (!products || products.length === 0) {\n    return (\n      <div className=\"bg-slate-900\">\n        <div className=\"container mx-auto px-4 py-16 md:py-24\">\n          <p className=\"text-center text-gray-400\">\n            No hay productos para mostrar.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const categories = [\n    'Todos',\n    ...Array.from(new Set(products.map((p) => p.category))),\n  ];\n\n  const filteredProducts =\n    activeCategory === 'Todos'\n      ? products\n      : products.filter((p) => p.category === activeCategory);\n\n  return (\n    <div className=\"bg-slate-900\">\n      <div className=\"container mx-auto px-4 py-16 md:py-24\">\n        <div className=\"flex justify-center flex-wrap gap-2 mb-12\">\n          {categories.map((category) => (\n            <Button\n              key={category}\n              variant={activeCategory === category ? 'default' : 'ghost'}\n              onClick={() => setActiveCategory(category)}\n              className=\"capitalize\"\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n        <motion.div\n          layout\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\"\n        >\n          <AnimatePresence>\n            {filteredProducts.map((product) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n"
            },
            {
              "name": "ProjectCard.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport {\n  Card,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { motion } from 'framer-motion';\nimport type { Project } from '@/lib/mock-projects';\nimport { Badge } from '../ui/badge';\nimport { Button } from '../ui/button';\nimport { ArrowRight } from 'lucide-react';\n\ntype ProjectCardProps = {\n  project: Project;\n};\n\nexport function ProjectCard({ project }: ProjectCardProps) {\n  return (\n    <motion.div\n      className=\"h-full\"\n      whileHover={{ y: -8, scale: 1.02 }}\n      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n    >\n      <Link href={`/proyectos/${project.slug}`} className=\"group block h-full\">\n        <Card className=\"h-full overflow-hidden bg-slate-800/50 border-slate-700/50 flex flex-col\">\n          <div className=\"overflow-hidden\">\n            <Image\n              src={project.imageUrl}\n              alt={project.imageAlt}\n              width={600}\n              height={400}\n              className=\"w-full h-auto object-cover transition-transform duration-300 group-hover:scale-110\"\n            />\n          </div>\n          <CardHeader>\n            <div className='flex justify-between items-center'>\n                <CardTitle className=\"text-xl group-hover:text-primary transition-colors text-white\">\n                    {project.title}\n                </CardTitle>\n                <Badge variant=\"secondary\">{project.category}</Badge>\n            </div>\n            <CardDescription className=\"text-gray-400 pt-2\">{project.description}</CardDescription>\n          </CardHeader>\n          <CardFooter className=\"mt-auto\">\n             <Button\n              variant=\"link\"\n              className=\"text-primary p-0 h-auto\"\n            >\n              Saber M\u00e1s\n              <ArrowRight className=\"ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1\" />\n            </Button>\n          </CardFooter>\n        </Card>\n      </Link>\n    </motion.div>\n  );\n}\n"
            },
            {
              "name": "ServicesSection.tsx",
              "type": "file",
              "content": "\n'use client';\nimport { motion } from 'framer-motion';\nimport {\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '../animations/scroll-animations';\nimport Link from 'next/link';\nimport { Button } from '../ui/button';\nimport { ArrowRight, type LucideIcon } from 'lucide-react';\nimport type { Solution } from '@prisma/client';\nimport * as lucideIcons from 'lucide-react';\n\nconst icons: { [key: string]: LucideIcon } = {\n  Gift: lucideIcons.Gift,\n  Sparkles: lucideIcons.Sparkles,\n  PackageCheck: lucideIcons.PackageCheck,\n  Shrink: lucideIcons.Shrink,\n  Flame: lucideIcons.Flame,\n  PackagePlus: lucideIcons.PackagePlus,\n  Square: lucideIcons.Square,\n  Component: lucideIcons.Component,\n};\n\nfunction getIcon(name: string): LucideIcon {\n  return icons[name] || icons.Component;\n}\n\nexport function ServicesSection({\n  id,\n  solutions,\n}: {\n  id?: string;\n  solutions: Solution[];\n}) {\n  return (\n    <section id={id} className=\"py-16 md:py-24 bg-slate-950\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl md:text-4xl font-bold text-center mb-4 text-white\">\n          Nuestros Servicios de Empaque\n        </h2>\n        <p className=\"text-lg text-gray-300 text-center max-w-3xl mx-auto mb-12\">\n          Ofrecemos una amplia gama de soluciones de empaque y embalaje\n          dise\u00f1adas para satisfacer las necesidades espec\u00edficas de su negocio.\n        </p>\n        <ScrollStaggerContainer\n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\"\n          staggerChildren={0.1}\n        >\n          {solutions.map((solution, index) => {\n            const Icon = getIcon(solution.icon);\n            return (\n              <ScrollStaggerItem key={index} className=\"h-full\">\n                <motion.div\n                  whileHover={{ scale: 1.03, y: -5 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                  className=\"text-left p-6 border border-slate-700/50 rounded-lg shadow-sm h-full bg-slate-900 flex flex-col group\"\n                >\n                  <div className=\"flex-shrink-0\">\n                    <Icon className=\"h-12 w-12 text-[#9ada34] mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-2 text-white\">\n                      {solution.title}\n                    </h3>\n                    <p className=\"text-gray-300 text-sm\">\n                      {solution.description}\n                    </p>\n                  </div>\n                  <div className=\"mt-auto pt-4\">\n                    <Button\n                      asChild\n                      variant=\"link\"\n                      className=\"text-primary p-0 h-auto opacity-0 group-hover:opacity-100 transition-opacity\"\n                    >\n                      <Link href={`/soluciones/${solution.slug}`}>\n                        Saber m\u00e1s\n                        <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </Link>\n                    </Button>\n                  </div>\n                </motion.div>\n              </ScrollStaggerItem>\n            );\n          })}\n        </ScrollStaggerContainer>\n      </div>\n    </section>\n  );\n}\n"
            },
            {
              "name": "SolucionesContent.tsx",
              "type": "file",
              "content": "'use client';\nimport type { LucideIcon } from 'lucide-react';\nimport * as lucideIcons from 'lucide-react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Check } from 'lucide-react';\nimport type { Solution } from '@prisma/client';\n\nconst icons: { [key: string]: LucideIcon } = {\n  Gift: lucideIcons.Gift,\n  Sparkles: lucideIcons.Sparkles,\n  PackageCheck: lucideIcons.PackageCheck,\n  Shrink: lucideIcons.Shrink,\n  Flame: lucideIcons.Flame,\n  PackagePlus: lucideIcons.PackagePlus,\n  Square: lucideIcons.Square,\n  Component: lucideIcons.Component,\n};\n\nfunction getIcon(name: string): LucideIcon {\n  return icons[name] || icons.Component;\n}\n\nexport function SolucionesContent({ solutions }: { solutions: Solution[] }) {\n  return (\n    <div className=\"container mx-auto px-4 py-16 md:py-24\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {solutions.map((solution) => {\n          const Icon = getIcon(solution.icon);\n          return (\n            <Card key={solution.title} className=\"flex flex-col\">\n              <CardHeader className=\"flex flex-row items-center gap-4\">\n                <Icon className=\"size-10 text-primary\" />\n                <CardTitle className=\"text-2xl\">{solution.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex flex-col flex-grow\">\n                <p className=\"text-muted-foreground mb-4\">\n                  {solution.detailedDescription}\n                </p>\n                <div className=\"mt-auto\">\n                  <h4 className=\"font-semibold mb-2 text-foreground\">\n                    Caracter\u00edsticas Clave\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    {solution.keyFeatures.map((feature) => (\n                      <li key={feature} className=\"flex items-start\">\n                        <Check className=\"size-4 text-primary mr-2 mt-1 flex-shrink-0\" />\n                        <span className=\"text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"
            },
            {
              "name": "TestimonialsSection.tsx",
              "type": "file",
              "content": "'use client';\n\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '../animations/scroll-animations';\n\nconst testimonials = [\n  {\n    quote:\n      'La calidad y el dise\u00f1o de los empaques superaron nuestras expectativas. Nuestro producto ahora destaca en el anaquel y hemos visto un aumento notable en las ventas.',\n    name: 'Ana Sof\u00eda Rey',\n    company: 'Directora de Marketing, Cosm\u00e9ticos BellezaPura',\n  },\n  {\n    quote:\n      'El equipo de T&E nos gui\u00f3 en la transici\u00f3n a materiales 100% reciclables. Su experiencia en sostenibilidad fue clave para nuestro proyecto.',\n    name: 'Carlos Mendoza',\n    company: 'Gerente de Operaciones, Alimentos Frescos S.A.',\n  },\n  {\n    quote:\n      'Necesit\u00e1bamos una soluci\u00f3n de empaque resistente y a la vez econ\u00f3mica para nuestros componentes electr\u00f3nicos. T&E entreg\u00f3 un dise\u00f1o perfecto que redujo nuestros costos.',\n    name: 'Laura Jim\u00e9nez',\n    company: 'Jefa de Compras, TechGadgets',\n  },\n  {\n    quote:\n      'El proceso de prototipado fue incre\u00edblemente r\u00e1pido y nos permiti\u00f3 hacer ajustes antes de la producci\u00f3n masiva. Un servicio impecable y muy profesional.',\n    name: 'Javier Torres',\n    company: 'Fundador, Juguetes Creativos',\n  },\n];\n\nexport function TestimonialsSection() {\n  return (\n    <section className=\"py-16 md:py-24 bg-zinc-950\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl md:text-4xl font-bold text-center mb-12 text-white\">\n          Lo que dicen nuestros clientes\n        </h2>\n        <ScrollStaggerContainer>\n          <Carousel\n            opts={{\n              align: 'start',\n              loop: true,\n            }}\n            className=\"w-full max-w-xs sm:max-w-xl md:max-w-2xl lg:max-w-4xl mx-auto\"\n          >\n            <CarouselContent>\n              {testimonials.map((testimonial, index) => (\n                <ScrollStaggerItem key={index}>\n                  <CarouselItem className=\"md:basis-1/2 lg:basis-1/3\">\n                    <div className=\"p-1 h-full\">\n                      <Card className=\"h-full flex flex-col justify-between bg-slate-900\">\n                        <CardContent className=\"p-6 flex-grow\">\n                          <blockquote className=\"text-lg italic text-gray-300 border-l-4 border-[#9ada34] pl-4\">\n                            {testimonial.quote}\n                          </blockquote>\n                          <div className=\"mt-4\">\n                            <p className=\"font-semibold text-white\">\n                              {testimonial.name}\n                            </p>\n                            <p className=\"text-sm text-gray-400\">\n                              {testimonial.company}\n                            </p>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CarouselItem>\n                </ScrollStaggerItem>\n              ))}\n            </CarouselContent>\n            <CarouselPrevious className=\"absolute left-0 top-1/2 -translate-y-1/2 -translate-x-8 hidden sm:flex\" />\n            <CarouselNext className=\"absolute right-0 top-1/2 -translate-y-1/2 translate-x-8 hidden sm:flex\" />\n          </Carousel>\n        </ScrollStaggerContainer>\n      </div>\n    </section>\n  );\n}\n"
            },
            {
              "name": "map-section.tsx",
              "type": "file",
              "content": "'use client';\n\nimport React, { useState } from 'react';\nimport {\n  APIProvider,\n  Map,\n  AdvancedMarker,\n} from '@vis.gl/react-google-maps';\nimport { ScrollReveal } from '@/components/animations/scroll-animations';\nimport { companyData } from '@/lib/data';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { Card, CardContent, CardHeader } from '../ui/card';\nimport { Logo } from '../logo';\nimport { Mail, MapPin, Phone } from 'lucide-react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n  borderRadius: '1rem',\n  border: '1px solid rgba(71, 85, 105, 0.5)',\n};\n\nconst position = {\n  lat: companyData.location.lat,\n  lng: companyData.location.lng,\n};\n\nexport function MapSection() {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n  const [infoWindowOpen, setInfoWindowOpen] = useState(false);\n\n  if (!apiKey) {\n    return (\n      <div className=\"flex items-center justify-center h-[500px] text-gray-400\">\n        La clave API de Google Maps no est\u00e1 configurada.\n      </div>\n    );\n  }\n\n  return (\n    <section\n      id=\"ubicacion\"\n      className=\"py-20 px-6 max-w-7xl mx-auto relative z-20\"\n    >\n      <ScrollReveal>\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n            Encu\u00e9ntranos en el <span className=\"text-primary\">Mapa</span>\n          </h2>\n          <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n            Visita nuestras instalaciones o cont\u00e1ctanos directamente.\n          </p>\n        </div>\n      </ScrollReveal>\n\n      <ScrollReveal>\n        <motion.div\n          whileHover={{\n            boxShadow: '0 0 25px rgba(154, 218, 52, 0.2)',\n            y: -5,\n          }}\n          transition={{ type: 'spring', stiffness: 300 }}\n          className=\"relative h-[60vh] min-h-[500px] bg-slate-800/50 backdrop-blur-sm rounded-2xl p-4 md:p-8 border border-slate-700/50 overflow-hidden\"\n        >\n          <APIProvider apiKey={apiKey}>\n            <Map\n              style={containerStyle}\n              defaultCenter={position}\n              defaultZoom={15}\n              gestureHandling={'greedy'}\n              disableDefaultUI={true}\n              mapId=\"t-and-e-map\"\n              onClick={() => setInfoWindowOpen(false)}\n            >\n              <AdvancedMarker\n                position={position}\n                onClick={() => setInfoWindowOpen(true)}\n              >\n                <motion.div\n                  className=\"relative\"\n                  animate={{\n                    scale: [1, 1.1, 1],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    repeat: Infinity,\n                    repeatType: 'loop',\n                    ease: 'easeInOut',\n                  }}\n                >\n                  <div className=\"absolute -inset-2 rounded-full bg-primary/30 blur-md\" />\n                  <div className=\"relative w-12 h-12 rounded-full bg-slate-900 border-2 border-primary p-2 shadow-lg\">\n                     <Logo />\n                  </div>\n                </motion.div>\n                <AnimatePresence>\n                  {infoWindowOpen && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -20, scale: 0.95 }}\n                      animate={{ opacity: 1, y: 0, scale: 1 }}\n                      exit={{ opacity: 0, y: -20, scale: 0.95 }}\n                      transition={{ duration: 0.3, ease: 'easeInOut' }}\n                      className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-4 w-80\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      <Card className=\"border-slate-700 bg-slate-900/80 backdrop-blur-md shadow-2xl\">\n                        <CardHeader>\n                          <Logo />\n                        </CardHeader>\n                        <CardContent className=\"space-y-3 text-sm\">\n                          <div className=\"flex items-start gap-3\">\n                            <MapPin className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n                            <span className=\"text-gray-300\">\n                              {companyData.address}\n                            </span>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <Phone className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n                            <a\n                              href={companyData.phone.href}\n                              className=\"text-gray-300 hover:text-primary transition-colors\"\n                            >\n                              {companyData.phone.number}\n                            </a>\n                          </div>\n                          <div className=\"flex items-start gap-3\">\n                            <Mail className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n                            <a\n                              href={`mailto:${companyData.email}`}\n                              className=\"text-gray-300 hover:text-primary transition-colors\"\n                            >\n                              {companyData.email}\n                            </a>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </AdvancedMarker>\n            </Map>\n          </APIProvider>\n        </motion.div>\n      </ScrollReveal>\n    </section>\n  );\n}\n\n<Card className=\"w-80 border-slate-700 bg-slate-900/80 backdrop-blur-md shadow-2xl\">\n  <CardHeader>\n    <Logo />\n  </CardHeader>\n  <CardContent className=\"space-y-3 text-sm\">\n    <div className=\"flex items-start gap-3\">\n      <MapPin className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n      <span className=\"text-gray-300\">{companyData.address}</span>\n    </div>\n    <div className=\"flex items-start gap-3\">\n      <Phone className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n      <a\n        href={companyData.phone.href}\n        className=\"text-gray-300 hover:text-primary transition-colors\"\n      >\n        {companyData.phone.number}\n      </a>\n    </div>\n    <div className=\"flex items-start gap-3\">\n      <Mail className=\"mt-0.5 h-4 w-4 shrink-0 text-primary\" />\n      <a\n        href={`mailto:${companyData.email}`}\n        className=\"text-gray-300 hover:text-primary transition-colors\"\n      >\n        {companyData.email}\n      </a>\n    </div>\n  </CardContent>\n</Card>\n"
            }
          ]
        },
        {
          "name": "logo.tsx",
          "type": "file",
          "content": "'use client';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { motion } from 'framer-motion';\n\nexport function Logo() {\n  return (\n    <motion.div whileHover={{ scale: 1.05 }}>\n      <Link\n        href=\"/\"\n        className=\"flex items-center gap-2 rounded-md focus-outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n      >\n        <Image\n          src=\"/Logo_TyE.svg\"\n          alt=\"T & E Tecnolog\u00eda y Empaque Logo\"\n          width={120}\n          height={40}\n          className=\"h-10 sm:h-12 w-auto shrink-0\"\n          sizes=\"120px\"\n          priority\n        />\n        <div className=\"flex flex-col\">\n          <h1 className=\"text-base sm:text-xl font-bold text-primary leading-tight\">\n            Tecnolog\u00eda y Empaque\n          </h1>\n          <p className=\"text-xs sm:text-sm text-muted-foreground leading-tight\">\n            Soluciones de empaque a su medida\n          </p>\n        </div>\n      </Link>\n    </motion.div>\n  );\n}\n"
        },
        {
          "name": "sections",
          "type": "directory",
          "children": [
            {
              "name": "contact-form-section.tsx",
              "type": "file",
              "content": "'use client';\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { motion } from 'framer-motion';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  ScrollReveal,\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '../animations/scroll-animations';\nimport { createMessage, type FormState } from '@/app/actions/contact';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  name: z.string().min(2, 'El nombre debe tener al menos 2 caracteres.'),\n  email: z.string().email('Por favor, introduce un email v\u00e1lido.'),\n  message: z\n    .string()\n    .min(10, 'El mensaje debe tener al menos 10 caracteres.'),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nconst initialState: FormState = {\n  message: '',\n  status: 'idle',\n};\n\nfunction SubmitButton() {\n  const { pending } = useFormStatus();\n  return (\n    <Button\n      type=\"submit\"\n      disabled={pending}\n      className=\"w-full bg-green-500 text-white hover:bg-green-600 transition-colors\"\n      size=\"lg\"\n    >\n      {pending ? (\n        <>\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          Enviando...\n        </>\n      ) : (\n        'Enviar Mensaje'\n      )}\n    </Button>\n  );\n}\n\nconst ContactFormSection: React.FC = () => {\n  const { toast } = useToast();\n  const [state, formAction] = useActionState(createMessage, initialState);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      message: '',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state.status === 'success') {\n      toast({\n        title: '\u00a1Mensaje Enviado!',\n        description: state.message,\n        variant: 'default',\n      });\n      form.reset();\n    } else if (state.status === 'error') {\n      toast({\n        title: 'Error al enviar',\n        description: state.message,\n        variant: 'destructive',\n      });\n    }\n  }, [state, toast, form]);\n\n  return (\n    <ScrollReveal>\n      <section className=\"bg-slate-900 py-20 sm:py-24\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"mx-auto max-w-3xl text-center\">\n            <h2 className=\"text-3xl font-bold text-white sm:text-4xl md:text-5xl\">\n              Cont\u00e1ctanos\n            </h2>\n            <p className=\"mt-4 text-lg text-gray-400\">\n              \u00bfTienes alguna pregunta o quieres empezar un proyecto? Env\u00edanos un\n              mensaje.\n            </p>\n          </div>\n\n          <ScrollStaggerContainer\n            className=\"mx-auto mt-12 max-w-xl\"\n            staggerChildren={0.1}\n          >\n            <motion.div\n              whileHover={{\n                boxShadow: '0 0 25px rgba(16, 185, 129, 0.3)',\n                y: -5,\n              }}\n              transition={{ type: 'spring', stiffness: 300 }}\n              className=\"rounded-xl border border-slate-700/50 bg-slate-800/50 p-6 sm:p-8 backdrop-blur-sm\"\n            >\n              <Form {...form}>\n                <form\n                  action={async (formData) => {\n                    const valid = await form.trigger();\n                    if (valid) {\n                      formAction(formData);\n                    }\n                  }}\n                  className=\"space-y-6\"\n                >\n                  <ScrollStaggerItem>\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">Nombre</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Tu nombre completo\"\n                              {...field}\n                              className=\"bg-slate-900/50 border-slate-700 text-white\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </ScrollStaggerItem>\n                  <ScrollStaggerItem>\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">\n                            Correo Electr\u00f3nico\n                          </FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"tu@email.com\"\n                              {...field}\n                              className=\"bg-slate-900/50 border-slate-700 text-white\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </ScrollStaggerItem>\n                  <ScrollStaggerItem>\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-white\">Mensaje</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"\u00bfEn qu\u00e9 podemos ayudarte?\"\n                              rows={5}\n                              {...field}\n                              className=\"resize-none bg-slate-900/50 border-slate-700 text-white\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </ScrollStaggerItem>\n                  <ScrollStaggerItem>\n                    <SubmitButton />\n                  </ScrollStaggerItem>\n                </form>\n              </Form>\n            </motion.div>\n          </ScrollStaggerContainer>\n        </div>\n      </section>\n    </ScrollReveal>\n  );\n};\n\nexport default ContactFormSection;\n"
            },
            {
              "name": "faq-section.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport {\n  ScrollReveal,\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '@/components/animations/scroll-animations';\n\nconst faqData = [\n  {\n    question: '\u00bfQu\u00e9 tipo de materiales utilizan para los empaques?',\n    answer:\n      'Utilizamos una amplia variedad de materiales, desde cart\u00f3n corrugado y pl\u00e1sticos reciclados hasta biopl\u00e1sticos y materiales compostables. La elecci\u00f3n del material depende de los requisitos de su producto, sus objetivos de sostenibilidad y su presupuesto.',\n  },\n  {\n    question: '\u00bfOfrecen servicio de dise\u00f1o de empaque personalizado?',\n    answer:\n      'S\u00ed, el dise\u00f1o a medida es una de nuestras especialidades. Nuestro equipo de dise\u00f1adores trabaja con usted para crear un empaque que no solo proteja su producto, sino que tambi\u00e9n refuerce su marca y atraiga a los consumidores.',\n  },\n  {\n    question: '\u00bfCu\u00e1l es el pedido m\u00ednimo para un empaque personalizado?',\n    answer:\n      'El pedido m\u00ednimo var\u00eda seg\u00fan la complejidad del dise\u00f1o y los materiales seleccionados. Le recomendamos que se ponga en contacto con nuestro equipo de ventas para obtener una cotizaci\u00f3n detallada y discutir sus necesidades espec\u00edficas.',\n  },\n  {\n    question: '\u00bfCu\u00e1nto tiempo tarda el proceso de prototipado?',\n    answer:\n      'Nuestro servicio de prototipado r\u00e1pido nos permite entregar muestras f\u00edsicas en cuesti\u00f3n de d\u00edas. Esto le permite validar el dise\u00f1o y la funcionalidad antes de comprometerse con una producci\u00f3n a gran escala, ahorrando tiempo y dinero.',\n  },\n  {\n    question: '\u00bfC\u00f3mo ayudan a las empresas a ser m\u00e1s sostenibles?',\n    answer:\n      'Ofrecemos consultor\u00eda y una amplia gama de materiales ecol\u00f3gicos para ayudar a las empresas a reducir su huella de carbono. Le guiamos en la transici\u00f3n hacia empaques 100% reciclables, biodegradables o compostables, sin sacrificar la calidad ni la protecci\u00f3n.',\n  },\n];\n\nconst FAQSection: React.FC = () => {\n  return (\n    <ScrollReveal>\n      <section className=\"bg-zinc-900 py-20 sm:py-24\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"mx-auto max-w-3xl text-center\">\n            <h2 className=\"text-3xl font-bold text-white sm:text-4xl md:text-5xl\">\n              Preguntas Frecuentes\n            </h2>\n            <p className=\"mt-4 text-lg text-gray-300\">\n              Aqu\u00ed encontrar\u00e1 respuestas a las dudas m\u00e1s comunes sobre nuestros\n              servicios y productos. Si no encuentra lo que busca, no dude en\n              contactarnos.\n            </p>\n          </div>\n\n          <ScrollStaggerContainer\n            className=\"mx-auto mt-12 max-w-3xl space-y-3\"\n            staggerChildren={0.1}\n          >\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {faqData.map((faq, index) => (\n                <ScrollStaggerItem key={index}>\n                  <motion.div\n                    whileHover={{ scale: 1.01 }}\n                    transition={{ type: 'spring', stiffness: 400, damping: 10 }}\n                  >\n                    <AccordionItem\n                      value={`item-${index}`}\n                      className=\"overflow-hidden rounded-lg border border-slate-800 bg-gradient-to-br from-slate-800 to-slate-900\"\n                    >\n                      <AccordionTrigger className=\"p-5 text-left font-semibold text-white hover:no-underline\">\n                        {faq.question}\n                      </AccordionTrigger>\n                      <AccordionContent className=\"px-5 pb-5 text-base text-gray-400\">\n                        {faq.answer}\n                      </AccordionContent>\n                    </AccordionItem>\n                  </motion.div>\n                </ScrollStaggerItem>\n              ))}\n            </Accordion>\n          </ScrollStaggerContainer>\n        </div>\n      </section>\n    </ScrollReveal>\n  );\n};\n\nexport default FAQSection;\n"
            },
            {
              "name": "product-carousel-section.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport Autoplay from 'embla-carousel-autoplay';\nimport { motion } from 'framer-motion';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { ScrollReveal } from '@/components/animations/scroll-animations';\nimport type { Product } from '@prisma/client';\nimport { cn } from '@/lib/utils';\nimport { ProductCard } from '../landing/ProductCard';\n\ntype ProductCarouselSectionProps = {\n  products: Product[];\n};\n\nconst ProductCarouselSection: React.FC<ProductCarouselSectionProps> = ({\n  products,\n}) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true, align: 'start' }, [\n    Autoplay({ delay: 5000, stopOnInteraction: true, stopOnMouseEnter: true }),\n  ]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const scrollTo = useCallback(\n    (index: number) => {\n      if (emblaApi) emblaApi.scrollTo(index);\n    },\n    [emblaApi]\n  );\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    const onSelect = () => {\n      setSelectedIndex(emblaApi.selectedScrollSnap());\n    };\n\n    emblaApi.on('select', onSelect);\n    onSelect(); // Set initial index\n\n    return () => {\n      emblaApi.off('select', onSelect);\n    };\n  }, [emblaApi]);\n\n  if (!products || products.length === 0) {\n    return null;\n  }\n\n  return (\n    <ScrollReveal>\n      <section className=\"bg-slate-900 py-20 sm:py-24\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-center text-3xl font-bold text-white sm:text-4xl md:text-5xl\">\n            Nuestros Productos Destacados\n          </h2>\n          <div className=\"relative mt-12\">\n            <div className=\"overflow-hidden\" ref={emblaRef}>\n              <div className=\"flex -ml-4\">\n                {products.map((product) => (\n                  <motion.div\n                    className=\"min-w-0 flex-shrink-0 flex-grow-0 basis-full pl-4 md:basis-1/2 lg:basis-1/3 xl:basis-1/4\"\n                    key={product.id}\n                    initial={{ opacity: 0, x: 50 }}\n                    whileInView={{ opacity: 1, x: 0 }}\n                    viewport={{ once: true, amount: 0.5 }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <ProductCard product={product} />\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n            <div className=\"absolute top-1/2 -translate-y-1/2 w-full\">\n               <div className=\"hidden md:flex justify-between items-center w-full\">\n                <Button\n                    isIconOnly\n                    onClick={scrollPrev}\n                    className=\"group h-12 w-12 rounded-full bg-primary/80 text-primary-foreground shadow-lg transition-all duration-300 hover:scale-110 hover:bg-primary -ml-6\"\n                    aria-label=\"Anterior\"\n                >\n                    <ChevronLeft className=\"h-6 w-6 transition-transform duration-300 group-hover:-translate-x-1\" />\n                </Button>\n                <Button\n                    isIconOnly\n                    onClick={scrollNext}\n                    className=\"group h-12 w-12 rounded-full bg-primary/80 text-primary-foreground shadow-lg transition-all duration-300 hover:scale-110 hover:bg-primary -mr-6\"\n                    aria-label=\"Siguiente\"\n                >\n                    <ChevronRight className=\"h-6 w-6 transition-transform duration-300 group-hover:translate-x-1\" />\n                </Button>\n              </div>\n            </div>\n             <div className=\"mt-8 flex justify-center gap-2\">\n              {products.map((_, index) => (\n                <motion.button\n                  key={index}\n                  onClick={() => scrollTo(index)}\n                  className={cn(\n                    'h-2 w-8 rounded-full transition-colors duration-300',\n                    index === selectedIndex ? 'bg-primary' : 'bg-slate-700'\n                  )}\n                  aria-label={`Ir a la diapositiva ${index + 1}`}\n                  whileHover={{ scale: 1.2 }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    </ScrollReveal>\n  );\n};\n\nexport default ProductCarouselSection;\n"
            },
            {
              "name": "stats-section.tsx",
              "type": "file",
              "content": "'use client';\n\nimport React from 'react';\nimport {\n  ScrollReveal,\n  ScrollStaggerContainer,\n  ScrollStaggerItem,\n} from '@/components/animations/scroll-animations';\nimport { AnimatedCounter } from '@/components/common/AnimatedCounter';\n\nconst stats = [\n  {\n    value: 20,\n    label: 'A\u00f1os de Experiencia',\n    suffix: '+',\n  },\n  {\n    value: 500,\n    label: 'Clientes Satisfechos',\n    suffix: '+',\n  },\n  {\n    value: 1200,\n    label: 'Proyectos Completados',\n    suffix: '+',\n  },\n  {\n    value: 99,\n    label: 'Tasa de Retenci\u00f3n',\n    suffix: '%',\n  },\n];\n\nexport function StatsSection() {\n  return (\n    <ScrollReveal>\n      <section className=\"bg-neutral-900 py-20 sm:py-24\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold text-white sm:text-4xl md:text-5xl\">\n              Nuestros n\u00fameros nos respaldan\n            </h2>\n            <p className=\"mx-auto mt-4 max-w-2xl text-lg text-gray-400\">\n              D\u00e9cadas de experiencia y cientos de clientes felices son nuestra\n              mejor garant\u00eda de calidad y compromiso.\n            </p>\n          </div>\n\n          <ScrollStaggerContainer\n            className=\"mt-12 grid grid-cols-1 gap-6 text-center sm:grid-cols-2 lg:grid-cols-4\"\n            staggerChildren={0.15}\n          >\n            {stats.map((stat, index) => (\n              <ScrollStaggerItem key={index}>\n                <div className=\"rounded-xl border border-slate-700/30 bg-slate-800/30 p-8 backdrop-blur-sm\">\n                  <div className=\"text-5xl font-extrabold text-green-400\">\n                    <AnimatedCounter value={stat.value} />\n                    <span>{stat.suffix}</span>\n                  </div>\n                  <p className=\"mt-2 text-lg text-gray-300\">{stat.label}</p>\n                </div>\n              </ScrollStaggerItem>\n            ))}\n          </ScrollStaggerContainer>\n        </div>\n      </section>\n    </ScrollReveal>\n  );\n}\n"
            },
            {
              "name": "testimonials-section.tsx",
              "type": "file",
              "content": "\n'use client';\n\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { Quote, Star } from 'lucide-react';\nimport {\n  FloatingElement,\n  ParallaxText,\n  ScrollReveal,\n} from '@/components/animations/scroll-animations';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from '@/components/ui/carousel';\nimport Autoplay from 'embla-carousel-autoplay';\n\nconst testimonials = [\n  {\n    quote:\n      'La calidad y el dise\u00f1o de los empaques superaron nuestras expectativas. Nuestro producto ahora destaca en el anaquel y hemos visto un aumento notable en las ventas.',\n    name: 'Ana Sof\u00eda Rey',\n    company: 'Directora de Marketing, Cosm\u00e9ticos BellezaPura',\n    rating: 5,\n  },\n  {\n    quote:\n      'El equipo de T&E nos gui\u00f3 en la transici\u00f3n a materiales 100% reciclables. Su experiencia en sostenibilidad fue clave para nuestro proyecto y ahora nuestra marca es m\u00e1s fuerte.',\n    name: 'Carlos Mendoza',\n    company: 'Gerente de Operaciones, Alimentos Frescos S.A.',\n    rating: 5,\n  },\n  {\n    quote:\n      'Necesit\u00e1bamos una soluci\u00f3n de empaque resistente y a la vez econ\u00f3mica para nuestros componentes electr\u00f3nicos. T&E entreg\u00f3 un dise\u00f1o perfecto que redujo nuestros costos en un 20%.',\n    name: 'Laura Jim\u00e9nez',\n    company: 'Jefa de Compras, TechGadgets',\n    rating: 4,\n  },\n  {\n    quote:\n      'El proceso de prototipado fue incre\u00edblemente r\u00e1pido y nos permiti\u00f3 hacer ajustes antes de la producci\u00f3n masiva. Un servicio impecable y muy profesional de principio a fin.',\n    name: 'Javier Torres',\n    company: 'Fundador, Juguetes Creativos',\n    rating: 5,\n  },\n  {\n    quote:\n      'La atenci\u00f3n al detalle y la disposici\u00f3n para encontrar soluciones creativas es lo que distingue a T&E. Estamos muy satisfechos con el resultado final de nuestro empaque.',\n    name: 'Roberto Ponce',\n    company: 'CEO, Delicias Gourmet',\n    rating: 5,\n  },\n];\n\nconst TestimonialsSection: React.FC = () => {\n   const plugin = React.useRef(\n    Autoplay({ delay: 4000, stopOnInteraction: true })\n  );\n  return (\n    <ScrollReveal>\n      <section className=\"relative overflow-hidden bg-slate-900 py-20 sm:py-24\">\n        <FloatingElement className=\"absolute -left-32 -top-32 h-96 w-96 rounded-full bg-green-500/10 blur-3xl\">\n          <div />\n        </FloatingElement>\n        <FloatingElement className=\"absolute -bottom-48 -right-48 h-96 w-96 rounded-full bg-slate-500/10 blur-3xl\">\n          <div />\n        </FloatingElement>\n        <ParallaxText speed={0.3}>\n          <Quote className=\"absolute right-1/2 top-1/2 h-96 w-96 -translate-y-1/2 translate-x-1/2 text-green-500/5\" />\n        </ParallaxText>\n\n        <div className=\"container relative mx-auto px-4\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold text-white sm:text-4xl md:text-5xl\">\n              Lo que dicen nuestros clientes\n            </h2>\n            <p className=\"mx-auto mt-4 max-w-2xl text-lg text-gray-400\">\n              La satisfacci\u00f3n de nuestros clientes es nuestra mejor carta de\n              presentaci\u00f3n.\n            </p>\n          </div>\n\n          <Carousel\n            plugins={[plugin.current]}\n            className=\"w-full max-w-6xl mx-auto mt-12\"\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n             opts={{\n              align: \"start\",\n              loop: true,\n            }}\n          >\n            <CarouselContent>\n              {testimonials.map((testimonial, index) => (\n                <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n                  <div className=\"p-4\">\n                  <motion.div\n                    whileHover={{ y: -8, scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                    className=\"h-full\"\n                  >\n                    <Card className=\"h-full border-slate-700/50 bg-slate-800/50 p-6 backdrop-blur-sm\">\n                      <CardContent className=\"p-0\">\n                        <div className=\"flex items-center\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-5 w-5 ${\n                                i < testimonial.rating\n                                  ? 'text-yellow-400'\n                                  : 'text-gray-600'\n                              }`}\n                              fill={\n                                i < testimonial.rating\n                                  ? 'currentColor'\n                                  : 'transparent'\n                              }\n                            />\n                          ))}\n                        </div>\n                        <blockquote className=\"mt-4 text-lg text-gray-300\">\n                          &quot;{testimonial.quote}&quot;\n                        </blockquote>\n                        <div className=\"mt-6\">\n                          <p className=\"font-bold text-white\">\n                            {testimonial.name}\n                          </p>\n                          <p className=\"text-sm text-gray-400\">\n                            {testimonial.company}\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                  </div>\n                </CarouselItem>\n              ))}\n            </CarouselContent>\n            <CarouselPrevious className=\"absolute left-0 top-1/2 -translate-y-1/2 -translate-x-8 hidden sm:flex\" />\n            <CarouselNext className=\"absolute right-0 top-1/2 -translate-y-1/2 translate-x-8 hidden sm:flex\" />\n          </Carousel>\n        </div>\n      </section>\n    </ScrollReveal>\n  );\n};\nexport default TestimonialsSection;\n"
            }
          ]
        },
        {
          "name": "ui",
          "type": "directory",
          "children": [
            {
              "name": "accordion.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b-0\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"group flex flex-1 items-center justify-between py-4 font-medium transition-all [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 text-green-400 transition-transform duration-200 group-hover:text-green-300\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
            },
            {
              "name": "alert-dialog.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
            },
            {
              "name": "alert.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
            },
            {
              "name": "avatar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
            },
            {
              "name": "badge.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
            },
            {
              "name": "button.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  isIconOnly?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, isIconOnly = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    const iconOnlyClasses = isIconOnly ? \"p-0\" : \"\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }), iconOnlyClasses)}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
            },
            {
              "name": "calendar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
            },
            {
              "name": "card.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
            },
            {
              "name": "carousel.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
            },
            {
              "name": "chart.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
            },
            {
              "name": "checkbox.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
            },
            {
              "name": "collapsible.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
            },
            {
              "name": "dialog.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
            },
            {
              "name": "dropdown-menu.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
            },
            {
              "name": "form.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
            },
            {
              "name": "input.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
            },
            {
              "name": "label.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
            },
            {
              "name": "menubar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
            },
            {
              "name": "popover.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
            },
            {
              "name": "progress.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
            },
            {
              "name": "radio-group.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
            },
            {
              "name": "scroll-area.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
            },
            {
              "name": "select.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            },
            {
              "name": "separator.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
            },
            {
              "name": "sheet.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
            },
            {
              "name": "sidebar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n      },\n      [setOpenProp, open]\n    )\n\n    React.useEffect(() => {\n        if (!isMobile) {\n            document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n        }\n    }, [open, isMobile]);\n\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
            },
            {
              "name": "skeleton.tsx",
              "type": "file",
              "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"
            },
            {
              "name": "slider.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
            },
            {
              "name": "switch.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
            },
            {
              "name": "table.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
            },
            {
              "name": "tabs.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
            },
            {
              "name": "textarea.tsx",
              "type": "file",
              "content": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"
            },
            {
              "name": "toast.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
            },
            {
              "name": "toaster.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
            },
            {
              "name": "tooltip.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
            }
          ]
        }
      ]
    },
    {
      "name": "hooks",
      "type": "directory",
      "children": [
        {
          "name": "use-mobile.tsx",
          "type": "file",
          "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"
        },
        {
          "name": "use-toast.ts",
          "type": "file",
          "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype Action =\n  | {\n      type: \"ADD_TOAST\"\n      toast: ToasterToast\n    }\n  | {\n      type: \"UPDATE_TOAST\"\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: \"DISMISS_TOAST\"\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: \"REMOVE_TOAST\"\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
        }
      ]
    },
    {
      "name": "lib",
      "type": "directory",
      "children": [
        {
          "name": "data.ts",
          "type": "file",
          "content": "export const companyData = {\n  address: 'Manuel Herrera y Obes 4492, Montevideo - Uruguay',\n  phone: {\n    number: '2304 8060',\n    href: 'tel:+59823048060',\n  },\n  email: 'empaqueurugua@gmail.com',\n  whatsapp: {\n    number: '+598 12 345 678',\n    href: 'https://api.whatsapp.com/send/?phone=59812345678',\n  },\n  location: {\n    lat: -34.8553907021,\n    lng: -56.2301691611,\n  },\n  socials: {\n    facebook: '#',\n    linkedin: '#',\n    instagram: '#',\n  },\n};\n"
        },
        {
          "name": "prisma.ts",
          "type": "file",
          "content": "import { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient().$extends(withAccelerate())\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>\n} & typeof global\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"
        },
        {
          "name": "utils.ts",
          "type": "file",
          "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function slugify(text: string): string {\n    return text\n        .toString()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .toLowerCase()\n        .trim()\n        .replace(/\\s+/g, '-')\n        .replace(/[^\\w-]+/g, '')\n        .replace(/--+/g, '-');\n}"
        }
      ]
    },
    {
      "name": "middleware.ts",
      "type": "file",
      "content": "import { NextResponse, type NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  if (process.env.NODE_ENV === 'production') {\n    if (request.headers.get('x-forwarded-proto') !== 'https') {\n      const newUrl = new URL(request.url);\n      newUrl.protocol = 'https';\n      return NextResponse.redirect(newUrl.toString(), 301);\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"
    }
  ]
}